
out/TestI2C.elf:     file format elf32-littlearm


Disassembly of section .text:

080001e4 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80001e4:	2100      	movs	r1, #0
  b     LoopCopyDataInit
 80001e6:	e003      	b.n	80001f0 <LoopCopyDataInit>

080001e8 <CopyDataInit>:

CopyDataInit:
  ldr   r3, =_sidata
 80001e8:	4b0a      	ldr	r3, [pc, #40]	; (8000214 <LoopFillZerobss+0x10>)
  ldr   r3, [r3, r1]
 80001ea:	585b      	ldr	r3, [r3, r1]
  str   r3, [r0, r1]
 80001ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80001ee:	3104      	adds	r1, #4

080001f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr   r0, =_sdata
 80001f0:	4809      	ldr	r0, [pc, #36]	; (8000218 <LoopFillZerobss+0x14>)
  ldr   r3, =_edata
 80001f2:	4b0a      	ldr	r3, [pc, #40]	; (800021c <LoopFillZerobss+0x18>)
  adds  r2, r0, r1
 80001f4:	1842      	adds	r2, r0, r1
  cmp   r2, r3
 80001f6:	429a      	cmp	r2, r3
  bcc   CopyDataInit
 80001f8:	d3f6      	bcc.n	80001e8 <CopyDataInit>
  ldr   r2, =_sbss
 80001fa:	4a09      	ldr	r2, [pc, #36]	; (8000220 <LoopFillZerobss+0x1c>)
  b     LoopFillZerobss
 80001fc:	e002      	b.n	8000204 <LoopFillZerobss>

080001fe <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80001fe:	2300      	movs	r3, #0
  str   r3, [r2], #4
 8000200:	f842 3b04 	str.w	r3, [r2], #4

08000204 <LoopFillZerobss>:

LoopFillZerobss:
  ldr   r3, = _ebss
 8000204:	4b07      	ldr	r3, [pc, #28]	; (8000224 <LoopFillZerobss+0x20>)
  cmp   r2, r3
 8000206:	429a      	cmp	r2, r3
  bcc   FillZerobss
 8000208:	d3f9      	bcc.n	80001fe <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800020a:	f000 f837 	bl	800027c <SystemInit>
/* Call the application's entry point.*/
  bl    main
 800020e:	f001 f95b 	bl	80014c8 <main>
  bx    lr
 8000212:	4770      	bx	lr
 8000214:	08001ebc 	.word	0x08001ebc
 8000218:	20000000 	.word	0x20000000
 800021c:	20000014 	.word	0x20000014
 8000220:	20000014 	.word	0x20000014
 8000224:	20000014 	.word	0x20000014

08000228 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000228:	e7fe      	b.n	8000228 <ADC1_2_IRQHandler>
	...

0800022c <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0
}
 8000230:	46bd      	mov	sp, r7
 8000232:	bc80      	pop	{r7}
 8000234:	4770      	bx	lr
 8000236:	bf00      	nop

08000238 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 800023c:	e7fe      	b.n	800023c <HardFault_Handler+0x4>
 800023e:	bf00      	nop

08000240 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000240:	b480      	push	{r7}
 8000242:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000244:	e7fe      	b.n	8000244 <MemManage_Handler+0x4>
 8000246:	bf00      	nop

08000248 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 800024c:	e7fe      	b.n	800024c <BusFault_Handler+0x4>
 800024e:	bf00      	nop

08000250 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000250:	b480      	push	{r7}
 8000252:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000254:	e7fe      	b.n	8000254 <UsageFault_Handler+0x4>
 8000256:	bf00      	nop

08000258 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
}
 800025c:	46bd      	mov	sp, r7
 800025e:	bc80      	pop	{r7}
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop

08000264 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
}
 8000268:	46bd      	mov	sp, r7
 800026a:	bc80      	pop	{r7}
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
}
 8000274:	46bd      	mov	sp, r7
 8000276:	bc80      	pop	{r7}
 8000278:	4770      	bx	lr
 800027a:	bf00      	nop

0800027c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000280:	4b1a      	ldr	r3, [pc, #104]	; (80002ec <SystemInit+0x70>)
 8000282:	4a1a      	ldr	r2, [pc, #104]	; (80002ec <SystemInit+0x70>)
 8000284:	6812      	ldr	r2, [r2, #0]
 8000286:	f042 0201 	orr.w	r2, r2, #1
 800028a:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
 800028c:	4a17      	ldr	r2, [pc, #92]	; (80002ec <SystemInit+0x70>)
 800028e:	4b17      	ldr	r3, [pc, #92]	; (80002ec <SystemInit+0x70>)
 8000290:	6859      	ldr	r1, [r3, #4]
 8000292:	4b17      	ldr	r3, [pc, #92]	; (80002f0 <SystemInit+0x74>)
 8000294:	ea01 0303 	and.w	r3, r1, r3
 8000298:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800029a:	4a14      	ldr	r2, [pc, #80]	; (80002ec <SystemInit+0x70>)
 800029c:	4b13      	ldr	r3, [pc, #76]	; (80002ec <SystemInit+0x70>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80002a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80002a8:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80002aa:	4b10      	ldr	r3, [pc, #64]	; (80002ec <SystemInit+0x70>)
 80002ac:	4a0f      	ldr	r2, [pc, #60]	; (80002ec <SystemInit+0x70>)
 80002ae:	6812      	ldr	r2, [r2, #0]
 80002b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80002b4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80002b6:	4b0d      	ldr	r3, [pc, #52]	; (80002ec <SystemInit+0x70>)
 80002b8:	4a0c      	ldr	r2, [pc, #48]	; (80002ec <SystemInit+0x70>)
 80002ba:	6852      	ldr	r2, [r2, #4]
 80002bc:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80002c0:	605a      	str	r2, [r3, #4]

#ifdef STM32F10X_CL
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= (uint32_t)0xEBFFFFFF;
 80002c2:	4b0a      	ldr	r3, [pc, #40]	; (80002ec <SystemInit+0x70>)
 80002c4:	4a09      	ldr	r2, [pc, #36]	; (80002ec <SystemInit+0x70>)
 80002c6:	6812      	ldr	r2, [r2, #0]
 80002c8:	f022 52a0 	bic.w	r2, r2, #335544320	; 0x14000000
 80002cc:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000;
 80002ce:	4b07      	ldr	r3, [pc, #28]	; (80002ec <SystemInit+0x70>)
 80002d0:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 80002d4:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
 80002d6:	4b05      	ldr	r3, [pc, #20]	; (80002ec <SystemInit+0x70>)
 80002d8:	f04f 0200 	mov.w	r2, #0
 80002dc:	62da      	str	r2, [r3, #44]	; 0x2c
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80002de:	f000 f80b 	bl	80002f8 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80002e2:	4b04      	ldr	r3, [pc, #16]	; (80002f4 <SystemInit+0x78>)
 80002e4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80002e8:	609a      	str	r2, [r3, #8]
#endif 
}
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	40021000 	.word	0x40021000
 80002f0:	f0ff0000 	.word	0xf0ff0000
 80002f4:	e000ed00 	.word	0xe000ed00

080002f8 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 80002fc:	f000 f802 	bl	8000304 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop

08000304 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800030a:	f04f 0300 	mov.w	r3, #0
 800030e:	607b      	str	r3, [r7, #4]
 8000310:	f04f 0300 	mov.w	r3, #0
 8000314:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000316:	4b49      	ldr	r3, [pc, #292]	; (800043c <SetSysClockTo72+0x138>)
 8000318:	4a48      	ldr	r2, [pc, #288]	; (800043c <SetSysClockTo72+0x138>)
 800031a:	6812      	ldr	r2, [r2, #0]
 800031c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000320:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000322:	4b46      	ldr	r3, [pc, #280]	; (800043c <SetSysClockTo72+0x138>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800032a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	f103 0301 	add.w	r3, r3, #1
 8000332:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000334:	683b      	ldr	r3, [r7, #0]
 8000336:	2b00      	cmp	r3, #0
 8000338:	d103      	bne.n	8000342 <SetSysClockTo72+0x3e>
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000340:	d1ef      	bne.n	8000322 <SetSysClockTo72+0x1e>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000342:	4b3e      	ldr	r3, [pc, #248]	; (800043c <SetSysClockTo72+0x138>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800034a:	2b00      	cmp	r3, #0
 800034c:	d003      	beq.n	8000356 <SetSysClockTo72+0x52>
  {
    HSEStatus = (uint32_t)0x01;
 800034e:	f04f 0301 	mov.w	r3, #1
 8000352:	603b      	str	r3, [r7, #0]
 8000354:	e002      	b.n	800035c <SetSysClockTo72+0x58>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000356:	f04f 0300 	mov.w	r3, #0
 800035a:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800035c:	683b      	ldr	r3, [r7, #0]
 800035e:	2b01      	cmp	r3, #1
 8000360:	d167      	bne.n	8000432 <SetSysClockTo72+0x12e>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000362:	4b37      	ldr	r3, [pc, #220]	; (8000440 <SetSysClockTo72+0x13c>)
 8000364:	4a36      	ldr	r2, [pc, #216]	; (8000440 <SetSysClockTo72+0x13c>)
 8000366:	6812      	ldr	r2, [r2, #0]
 8000368:	f042 0210 	orr.w	r2, r2, #16
 800036c:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 800036e:	4b34      	ldr	r3, [pc, #208]	; (8000440 <SetSysClockTo72+0x13c>)
 8000370:	4a33      	ldr	r2, [pc, #204]	; (8000440 <SetSysClockTo72+0x13c>)
 8000372:	6812      	ldr	r2, [r2, #0]
 8000374:	f022 0203 	bic.w	r2, r2, #3
 8000378:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 800037a:	4b31      	ldr	r3, [pc, #196]	; (8000440 <SetSysClockTo72+0x13c>)
 800037c:	4a30      	ldr	r2, [pc, #192]	; (8000440 <SetSysClockTo72+0x13c>)
 800037e:	6812      	ldr	r2, [r2, #0]
 8000380:	f042 0202 	orr.w	r2, r2, #2
 8000384:	601a      	str	r2, [r3, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000386:	4b2d      	ldr	r3, [pc, #180]	; (800043c <SetSysClockTo72+0x138>)
 8000388:	4a2c      	ldr	r2, [pc, #176]	; (800043c <SetSysClockTo72+0x138>)
 800038a:	6852      	ldr	r2, [r2, #4]
 800038c:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800038e:	4b2b      	ldr	r3, [pc, #172]	; (800043c <SetSysClockTo72+0x138>)
 8000390:	4a2a      	ldr	r2, [pc, #168]	; (800043c <SetSysClockTo72+0x138>)
 8000392:	6852      	ldr	r2, [r2, #4]
 8000394:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000396:	4b29      	ldr	r3, [pc, #164]	; (800043c <SetSysClockTo72+0x138>)
 8000398:	4a28      	ldr	r2, [pc, #160]	; (800043c <SetSysClockTo72+0x138>)
 800039a:	6852      	ldr	r2, [r2, #4]
 800039c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80003a0:	605a      	str	r2, [r3, #4]
#ifdef STM32F10X_CL
    /* Configure PLLs ------------------------------------------------------*/
    /* PLL2 configuration: PLL2CLK = (HSE / 5) * 8 = 40 MHz */
    /* PREDIV1 configuration: PREDIV1CLK = PLL2 / 5 = 8 MHz */
        
    RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
 80003a2:	4a26      	ldr	r2, [pc, #152]	; (800043c <SetSysClockTo72+0x138>)
 80003a4:	4b25      	ldr	r3, [pc, #148]	; (800043c <SetSysClockTo72+0x138>)
 80003a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80003a8:	4b26      	ldr	r3, [pc, #152]	; (8000444 <SetSysClockTo72+0x140>)
 80003aa:	ea01 0303 	and.w	r3, r1, r3
 80003ae:	62d3      	str	r3, [r2, #44]	; 0x2c
                              RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);
    RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
 80003b0:	4a22      	ldr	r2, [pc, #136]	; (800043c <SetSysClockTo72+0x138>)
 80003b2:	4b22      	ldr	r3, [pc, #136]	; (800043c <SetSysClockTo72+0x138>)
 80003b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003b6:	f443 3382 	orr.w	r3, r3, #66560	; 0x10400
 80003ba:	f443 7311 	orr.w	r3, r3, #580	; 0x244
 80003be:	62d3      	str	r3, [r2, #44]	; 0x2c
                             RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV5);
  
    /* Enable PLL2 */
    RCC->CR |= RCC_CR_PLL2ON;
 80003c0:	4b1e      	ldr	r3, [pc, #120]	; (800043c <SetSysClockTo72+0x138>)
 80003c2:	4a1e      	ldr	r2, [pc, #120]	; (800043c <SetSysClockTo72+0x138>)
 80003c4:	6812      	ldr	r2, [r2, #0]
 80003c6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80003ca:	601a      	str	r2, [r3, #0]
    /* Wait till PLL2 is ready */
    while((RCC->CR & RCC_CR_PLL2RDY) == 0)
 80003cc:	bf00      	nop
 80003ce:	4b1b      	ldr	r3, [pc, #108]	; (800043c <SetSysClockTo72+0x138>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d0f9      	beq.n	80003ce <SetSysClockTo72+0xca>
    {
    }
    
   
    /* PLL configuration: PLLCLK = PREDIV1 * 9 = 72 MHz */ 
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
 80003da:	4b18      	ldr	r3, [pc, #96]	; (800043c <SetSysClockTo72+0x138>)
 80003dc:	4a17      	ldr	r2, [pc, #92]	; (800043c <SetSysClockTo72+0x138>)
 80003de:	6852      	ldr	r2, [r2, #4]
 80003e0:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 80003e4:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
 80003e6:	4b15      	ldr	r3, [pc, #84]	; (800043c <SetSysClockTo72+0x138>)
 80003e8:	4a14      	ldr	r2, [pc, #80]	; (800043c <SetSysClockTo72+0x138>)
 80003ea:	6852      	ldr	r2, [r2, #4]
 80003ec:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 80003f0:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80003f2:	4b12      	ldr	r3, [pc, #72]	; (800043c <SetSysClockTo72+0x138>)
 80003f4:	4a11      	ldr	r2, [pc, #68]	; (800043c <SetSysClockTo72+0x138>)
 80003f6:	6812      	ldr	r2, [r2, #0]
 80003f8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80003fc:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80003fe:	bf00      	nop
 8000400:	4b0e      	ldr	r3, [pc, #56]	; (800043c <SetSysClockTo72+0x138>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000408:	2b00      	cmp	r3, #0
 800040a:	d0f9      	beq.n	8000400 <SetSysClockTo72+0xfc>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800040c:	4b0b      	ldr	r3, [pc, #44]	; (800043c <SetSysClockTo72+0x138>)
 800040e:	4a0b      	ldr	r2, [pc, #44]	; (800043c <SetSysClockTo72+0x138>)
 8000410:	6852      	ldr	r2, [r2, #4]
 8000412:	f022 0203 	bic.w	r2, r2, #3
 8000416:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000418:	4b08      	ldr	r3, [pc, #32]	; (800043c <SetSysClockTo72+0x138>)
 800041a:	4a08      	ldr	r2, [pc, #32]	; (800043c <SetSysClockTo72+0x138>)
 800041c:	6852      	ldr	r2, [r2, #4]
 800041e:	f042 0202 	orr.w	r2, r2, #2
 8000422:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000424:	bf00      	nop
 8000426:	4b05      	ldr	r3, [pc, #20]	; (800043c <SetSysClockTo72+0x138>)
 8000428:	685b      	ldr	r3, [r3, #4]
 800042a:	f003 030c 	and.w	r3, r3, #12
 800042e:	2b08      	cmp	r3, #8
 8000430:	d1f9      	bne.n	8000426 <SetSysClockTo72+0x122>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8000432:	f107 070c 	add.w	r7, r7, #12
 8000436:	46bd      	mov	sp, r7
 8000438:	bc80      	pop	{r7}
 800043a:	4770      	bx	lr
 800043c:	40021000 	.word	0x40021000
 8000440:	40022000 	.word	0x40022000
 8000444:	fffef000 	.word	0xfffef000

08000448 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000448:	b480      	push	{r7}
 800044a:	b087      	sub	sp, #28
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000450:	f04f 0300 	mov.w	r3, #0
 8000454:	617b      	str	r3, [r7, #20]
 8000456:	f04f 0300 	mov.w	r3, #0
 800045a:	613b      	str	r3, [r7, #16]
 800045c:	f04f 030f 	mov.w	r3, #15
 8000460:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	78db      	ldrb	r3, [r3, #3]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d03f      	beq.n	80004ea <NVIC_Init+0xa2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800046a:	4b2b      	ldr	r3, [pc, #172]	; (8000518 <NVIC_Init+0xd0>)
 800046c:	68db      	ldr	r3, [r3, #12]
 800046e:	ea6f 0303 	mvn.w	r3, r3
 8000472:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000476:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800047a:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 800047c:	697b      	ldr	r3, [r7, #20]
 800047e:	f1c3 0304 	rsb	r3, r3, #4
 8000482:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 8000484:	697b      	ldr	r3, [r7, #20]
 8000486:	68fa      	ldr	r2, [r7, #12]
 8000488:	fa22 f303 	lsr.w	r3, r2, r3
 800048c:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	785b      	ldrb	r3, [r3, #1]
 8000492:	461a      	mov	r2, r3
 8000494:	693b      	ldr	r3, [r7, #16]
 8000496:	fa02 f303 	lsl.w	r3, r2, r3
 800049a:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	789b      	ldrb	r3, [r3, #2]
 80004a0:	461a      	mov	r2, r3
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	ea02 0303 	and.w	r3, r2, r3
 80004a8:	697a      	ldr	r2, [r7, #20]
 80004aa:	ea42 0303 	orr.w	r3, r2, r3
 80004ae:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 80004b0:	697b      	ldr	r3, [r7, #20]
 80004b2:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80004b6:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80004b8:	4918      	ldr	r1, [pc, #96]	; (800051c <NVIC_Init+0xd4>)
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	697a      	ldr	r2, [r7, #20]
 80004c0:	b2d2      	uxtb	r2, r2
 80004c2:	18cb      	adds	r3, r1, r3
 80004c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80004c8:	4b14      	ldr	r3, [pc, #80]	; (800051c <NVIC_Init+0xd4>)
 80004ca:	687a      	ldr	r2, [r7, #4]
 80004cc:	7812      	ldrb	r2, [r2, #0]
 80004ce:	ea4f 1252 	mov.w	r2, r2, lsr #5
 80004d2:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80004d4:	6879      	ldr	r1, [r7, #4]
 80004d6:	7809      	ldrb	r1, [r1, #0]
 80004d8:	f001 011f 	and.w	r1, r1, #31
 80004dc:	f04f 0001 	mov.w	r0, #1
 80004e0:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80004e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80004e8:	e011      	b.n	800050e <NVIC_Init+0xc6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80004ea:	4b0c      	ldr	r3, [pc, #48]	; (800051c <NVIC_Init+0xd4>)
 80004ec:	687a      	ldr	r2, [r7, #4]
 80004ee:	7812      	ldrb	r2, [r2, #0]
 80004f0:	ea4f 1252 	mov.w	r2, r2, lsr #5
 80004f4:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80004f6:	6879      	ldr	r1, [r7, #4]
 80004f8:	7809      	ldrb	r1, [r1, #0]
 80004fa:	f001 011f 	and.w	r1, r1, #31
 80004fe:	f04f 0001 	mov.w	r0, #1
 8000502:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000506:	f102 0220 	add.w	r2, r2, #32
 800050a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800050e:	f107 071c 	add.w	r7, r7, #28
 8000512:	46bd      	mov	sp, r7
 8000514:	bc80      	pop	{r7}
 8000516:	4770      	bx	lr
 8000518:	e000ed00 	.word	0xe000ed00
 800051c:	e000e100 	.word	0xe000e100

08000520 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000520:	b480      	push	{r7}
 8000522:	b089      	sub	sp, #36	; 0x24
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
 8000528:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 800052a:	f04f 0300 	mov.w	r3, #0
 800052e:	61fb      	str	r3, [r7, #28]
 8000530:	f04f 0300 	mov.w	r3, #0
 8000534:	613b      	str	r3, [r7, #16]
 8000536:	f04f 0300 	mov.w	r3, #0
 800053a:	61bb      	str	r3, [r7, #24]
 800053c:	f04f 0300 	mov.w	r3, #0
 8000540:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000542:	f04f 0300 	mov.w	r3, #0
 8000546:	617b      	str	r3, [r7, #20]
 8000548:	f04f 0300 	mov.w	r3, #0
 800054c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	78db      	ldrb	r3, [r3, #3]
 8000552:	f003 030f 	and.w	r3, r3, #15
 8000556:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	78db      	ldrb	r3, [r3, #3]
 800055c:	f003 0310 	and.w	r3, r3, #16
 8000560:	2b00      	cmp	r3, #0
 8000562:	d005      	beq.n	8000570 <GPIO_Init+0x50>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	789b      	ldrb	r3, [r3, #2]
 8000568:	69fa      	ldr	r2, [r7, #28]
 800056a:	ea42 0303 	orr.w	r3, r2, r3
 800056e:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	881b      	ldrh	r3, [r3, #0]
 8000574:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8000578:	2b00      	cmp	r3, #0
 800057a:	d051      	beq.n	8000620 <GPIO_Init+0x100>
  {
    tmpreg = GPIOx->CRL;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	61bb      	str	r3, [r7, #24]
 8000588:	e044      	b.n	8000614 <GPIO_Init+0xf4>
    {
      pos = ((uint32_t)0x01) << pinpos;
 800058a:	69bb      	ldr	r3, [r7, #24]
 800058c:	f04f 0201 	mov.w	r2, #1
 8000590:	fa02 f303 	lsl.w	r3, r2, r3
 8000594:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	881b      	ldrh	r3, [r3, #0]
 800059a:	461a      	mov	r2, r3
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	ea02 0303 	and.w	r3, r2, r3
 80005a2:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80005a4:	693a      	ldr	r2, [r7, #16]
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	429a      	cmp	r2, r3
 80005aa:	d12f      	bne.n	800060c <GPIO_Init+0xec>
      {
        pos = pinpos << 2;
 80005ac:	69bb      	ldr	r3, [r7, #24]
 80005ae:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80005b2:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	f04f 020f 	mov.w	r2, #15
 80005ba:	fa02 f303 	lsl.w	r3, r2, r3
 80005be:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	ea6f 0303 	mvn.w	r3, r3
 80005c6:	697a      	ldr	r2, [r7, #20]
 80005c8:	ea02 0303 	and.w	r3, r2, r3
 80005cc:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	69fa      	ldr	r2, [r7, #28]
 80005d2:	fa02 f303 	lsl.w	r3, r2, r3
 80005d6:	697a      	ldr	r2, [r7, #20]
 80005d8:	ea42 0303 	orr.w	r3, r2, r3
 80005dc:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	78db      	ldrb	r3, [r3, #3]
 80005e2:	2b28      	cmp	r3, #40	; 0x28
 80005e4:	d107      	bne.n	80005f6 <GPIO_Init+0xd6>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80005e6:	69bb      	ldr	r3, [r7, #24]
 80005e8:	f04f 0201 	mov.w	r2, #1
 80005ec:	fa02 f203 	lsl.w	r2, r2, r3
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	615a      	str	r2, [r3, #20]
 80005f4:	e00a      	b.n	800060c <GPIO_Init+0xec>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	78db      	ldrb	r3, [r3, #3]
 80005fa:	2b48      	cmp	r3, #72	; 0x48
 80005fc:	d106      	bne.n	800060c <GPIO_Init+0xec>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80005fe:	69bb      	ldr	r3, [r7, #24]
 8000600:	f04f 0201 	mov.w	r2, #1
 8000604:	fa02 f203 	lsl.w	r2, r2, r3
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800060c:	69bb      	ldr	r3, [r7, #24]
 800060e:	f103 0301 	add.w	r3, r3, #1
 8000612:	61bb      	str	r3, [r7, #24]
 8000614:	69bb      	ldr	r3, [r7, #24]
 8000616:	2b07      	cmp	r3, #7
 8000618:	d9b7      	bls.n	800058a <GPIO_Init+0x6a>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	697a      	ldr	r2, [r7, #20]
 800061e:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	881b      	ldrh	r3, [r3, #0]
 8000624:	2bff      	cmp	r3, #255	; 0xff
 8000626:	d956      	bls.n	80006d6 <GPIO_Init+0x1b6>
  {
    tmpreg = GPIOx->CRH;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	685b      	ldr	r3, [r3, #4]
 800062c:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800062e:	f04f 0300 	mov.w	r3, #0
 8000632:	61bb      	str	r3, [r7, #24]
 8000634:	e049      	b.n	80006ca <GPIO_Init+0x1aa>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000636:	69bb      	ldr	r3, [r7, #24]
 8000638:	f103 0308 	add.w	r3, r3, #8
 800063c:	f04f 0201 	mov.w	r2, #1
 8000640:	fa02 f303 	lsl.w	r3, r2, r3
 8000644:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	881b      	ldrh	r3, [r3, #0]
 800064a:	461a      	mov	r2, r3
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	ea02 0303 	and.w	r3, r2, r3
 8000652:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000654:	693a      	ldr	r2, [r7, #16]
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	429a      	cmp	r2, r3
 800065a:	d132      	bne.n	80006c2 <GPIO_Init+0x1a2>
      {
        pos = pinpos << 2;
 800065c:	69bb      	ldr	r3, [r7, #24]
 800065e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000662:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	f04f 020f 	mov.w	r2, #15
 800066a:	fa02 f303 	lsl.w	r3, r2, r3
 800066e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	ea6f 0303 	mvn.w	r3, r3
 8000676:	697a      	ldr	r2, [r7, #20]
 8000678:	ea02 0303 	and.w	r3, r2, r3
 800067c:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	69fa      	ldr	r2, [r7, #28]
 8000682:	fa02 f303 	lsl.w	r3, r2, r3
 8000686:	697a      	ldr	r2, [r7, #20]
 8000688:	ea42 0303 	orr.w	r3, r2, r3
 800068c:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	78db      	ldrb	r3, [r3, #3]
 8000692:	2b28      	cmp	r3, #40	; 0x28
 8000694:	d108      	bne.n	80006a8 <GPIO_Init+0x188>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000696:	69bb      	ldr	r3, [r7, #24]
 8000698:	f103 0308 	add.w	r3, r3, #8
 800069c:	f04f 0201 	mov.w	r2, #1
 80006a0:	fa02 f203 	lsl.w	r2, r2, r3
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	78db      	ldrb	r3, [r3, #3]
 80006ac:	2b48      	cmp	r3, #72	; 0x48
 80006ae:	d108      	bne.n	80006c2 <GPIO_Init+0x1a2>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80006b0:	69bb      	ldr	r3, [r7, #24]
 80006b2:	f103 0308 	add.w	r3, r3, #8
 80006b6:	f04f 0201 	mov.w	r2, #1
 80006ba:	fa02 f203 	lsl.w	r2, r2, r3
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80006c2:	69bb      	ldr	r3, [r7, #24]
 80006c4:	f103 0301 	add.w	r3, r3, #1
 80006c8:	61bb      	str	r3, [r7, #24]
 80006ca:	69bb      	ldr	r3, [r7, #24]
 80006cc:	2b07      	cmp	r3, #7
 80006ce:	d9b2      	bls.n	8000636 <GPIO_Init+0x116>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	697a      	ldr	r2, [r7, #20]
 80006d4:	605a      	str	r2, [r3, #4]
  }
}
 80006d6:	f107 0724 	add.w	r7, r7, #36	; 0x24
 80006da:	46bd      	mov	sp, r7
 80006dc:	bc80      	pop	{r7}
 80006de:	4770      	bx	lr

080006e0 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	460b      	mov	r3, r1
 80006ea:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80006ec:	f04f 0300 	mov.w	r3, #0
 80006f0:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	689a      	ldr	r2, [r3, #8]
 80006f6:	887b      	ldrh	r3, [r7, #2]
 80006f8:	ea02 0303 	and.w	r3, r2, r3
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d003      	beq.n	8000708 <GPIO_ReadInputDataBit+0x28>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000700:	f04f 0301 	mov.w	r3, #1
 8000704:	73fb      	strb	r3, [r7, #15]
 8000706:	e002      	b.n	800070e <GPIO_ReadInputDataBit+0x2e>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000708:	f04f 0300 	mov.w	r3, #0
 800070c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800070e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000710:	4618      	mov	r0, r3
 8000712:	f107 0714 	add.w	r7, r7, #20
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr

0800071c <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	460b      	mov	r3, r1
 8000726:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8000728:	887a      	ldrh	r2, [r7, #2]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	611a      	str	r2, [r3, #16]
}
 800072e:	f107 070c 	add.w	r7, r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr

08000738 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	460b      	mov	r3, r1
 8000742:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8000744:	887a      	ldrh	r2, [r7, #2]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	615a      	str	r2, [r3, #20]
}
 800074a:	f107 070c 	add.w	r7, r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr

08000754 <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
 8000754:	b480      	push	{r7}
 8000756:	b087      	sub	sp, #28
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	460b      	mov	r3, r1
 800075e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
 8000760:	f04f 0300 	mov.w	r3, #0
 8000764:	613b      	str	r3, [r7, #16]
 8000766:	f04f 0300 	mov.w	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	f04f 0300 	mov.w	r3, #0
 8000770:	617b      	str	r3, [r7, #20]
 8000772:	f04f 0300 	mov.w	r3, #0
 8000776:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2b00      	cmp	r3, #0
 800077c:	da03      	bge.n	8000786 <GPIO_PinRemapConfig+0x32>
  {
    tmpreg = AFIO->MAPR2;
 800077e:	4b35      	ldr	r3, [pc, #212]	; (8000854 <GPIO_PinRemapConfig+0x100>)
 8000780:	69db      	ldr	r3, [r3, #28]
 8000782:	617b      	str	r3, [r7, #20]
 8000784:	e002      	b.n	800078c <GPIO_PinRemapConfig+0x38>
  }
  else
  {
    tmpreg = AFIO->MAPR;
 8000786:	4b33      	ldr	r3, [pc, #204]	; (8000854 <GPIO_PinRemapConfig+0x100>)
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000792:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8000796:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	ea4f 4303 	mov.w	r3, r3, lsl #16
 800079e:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80007a2:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80007aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80007ae:	d10a      	bne.n	80007c6 <GPIO_PinRemapConfig+0x72>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80007b6:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 80007b8:	4b26      	ldr	r3, [pc, #152]	; (8000854 <GPIO_PinRemapConfig+0x100>)
 80007ba:	4a26      	ldr	r2, [pc, #152]	; (8000854 <GPIO_PinRemapConfig+0x100>)
 80007bc:	6852      	ldr	r2, [r2, #4]
 80007be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	e028      	b.n	8000818 <GPIO_PinRemapConfig+0xc4>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d011      	beq.n	80007f4 <GPIO_PinRemapConfig+0xa0>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	f04f 0203 	mov.w	r2, #3
 80007d6:	fa02 f303 	lsl.w	r3, r2, r3
 80007da:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	ea6f 0303 	mvn.w	r3, r3
 80007e2:	697a      	ldr	r2, [r7, #20]
 80007e4:	ea02 0303 	and.w	r3, r2, r3
 80007e8:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 80007ea:	697b      	ldr	r3, [r7, #20]
 80007ec:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 80007f0:	617b      	str	r3, [r7, #20]
 80007f2:	e011      	b.n	8000818 <GPIO_PinRemapConfig+0xc4>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	ea4f 5353 	mov.w	r3, r3, lsr #21
 80007fa:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80007fe:	693a      	ldr	r2, [r7, #16]
 8000800:	fa02 f303 	lsl.w	r3, r2, r3
 8000804:	ea6f 0303 	mvn.w	r3, r3
 8000808:	697a      	ldr	r2, [r7, #20]
 800080a:	ea02 0303 	and.w	r3, r2, r3
 800080e:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8000816:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
 8000818:	78fb      	ldrb	r3, [r7, #3]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d00b      	beq.n	8000836 <GPIO_PinRemapConfig+0xe2>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	ea4f 5353 	mov.w	r3, r3, lsr #21
 8000824:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000828:	693a      	ldr	r2, [r7, #16]
 800082a:	fa02 f303 	lsl.w	r3, r2, r3
 800082e:	697a      	ldr	r2, [r7, #20]
 8000830:	ea42 0303 	orr.w	r3, r2, r3
 8000834:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	2b00      	cmp	r3, #0
 800083a:	da03      	bge.n	8000844 <GPIO_PinRemapConfig+0xf0>
  {
    AFIO->MAPR2 = tmpreg;
 800083c:	4b05      	ldr	r3, [pc, #20]	; (8000854 <GPIO_PinRemapConfig+0x100>)
 800083e:	697a      	ldr	r2, [r7, #20]
 8000840:	61da      	str	r2, [r3, #28]
 8000842:	e002      	b.n	800084a <GPIO_PinRemapConfig+0xf6>
  }
  else
  {
    AFIO->MAPR = tmpreg;
 8000844:	4b03      	ldr	r3, [pc, #12]	; (8000854 <GPIO_PinRemapConfig+0x100>)
 8000846:	697a      	ldr	r2, [r7, #20]
 8000848:	605a      	str	r2, [r3, #4]
  }  
}
 800084a:	f107 071c 	add.w	r7, r7, #28
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr
 8000854:	40010000 	.word	0x40010000

08000858 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *   contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08a      	sub	sp, #40	; 0x28
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 8000862:	f04f 0300 	mov.w	r3, #0
 8000866:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000868:	f04f 0300 	mov.w	r3, #0
 800086c:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 800086e:	f04f 0304 	mov.w	r3, #4
 8000872:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 8000874:	4b60      	ldr	r3, [pc, #384]	; (80009f8 <I2C_Init+0x1a0>)
 8000876:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	889b      	ldrh	r3, [r3, #4]
 800087c:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= CR2_FREQ_Reset;
 800087e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000880:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000884:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8000886:	f107 0308 	add.w	r3, r7, #8
 800088a:	4618      	mov	r0, r3
 800088c:	f000 f9b0 	bl	8000bf0 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8000890:	693b      	ldr	r3, [r7, #16]
 8000892:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8000894:	69fa      	ldr	r2, [r7, #28]
 8000896:	4b59      	ldr	r3, [pc, #356]	; (80009fc <I2C_Init+0x1a4>)
 8000898:	fba3 1302 	umull	r1, r3, r3, r2
 800089c:	ea4f 4393 	mov.w	r3, r3, lsr #18
 80008a0:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 80008a2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80008a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80008a6:	ea42 0303 	orr.w	r3, r2, r3
 80008aa:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80008b0:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= CR1_PE_Reset;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	881b      	ldrh	r3, [r3, #0]
 80008b6:	b29b      	uxth	r3, r3
 80008b8:	f023 0301 	bic.w	r3, r3, #1
 80008bc:	b29a      	uxth	r2, r3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 80008c2:	f04f 0300 	mov.w	r3, #0
 80008c6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	4b4c      	ldr	r3, [pc, #304]	; (8000a00 <I2C_Init+0x1a8>)
 80008ce:	429a      	cmp	r2, r3
 80008d0:	d819      	bhi.n	8000906 <I2C_Init+0xae>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008da:	69fa      	ldr	r2, [r7, #28]
 80008dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80008e0:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 80008e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80008e4:	2b03      	cmp	r3, #3
 80008e6:	d802      	bhi.n	80008ee <I2C_Init+0x96>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 80008e8:	f04f 0304 	mov.w	r3, #4
 80008ec:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 80008ee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80008f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80008f2:	ea42 0303 	orr.w	r3, r2, r3
 80008f6:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 80008f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80008fa:	f103 0301 	add.w	r3, r3, #1
 80008fe:	b29a      	uxth	r2, r3
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	841a      	strh	r2, [r3, #32]
 8000904:	e049      	b.n	800099a <I2C_Init+0x142>
  }
  /* Configure speed in fast mode */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	88da      	ldrh	r2, [r3, #6]
 800090a:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 800090e:	429a      	cmp	r2, r3
 8000910:	d10a      	bne.n	8000928 <I2C_Init+0xd0>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	4613      	mov	r3, r2
 8000918:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800091c:	189b      	adds	r3, r3, r2
 800091e:	69fa      	ldr	r2, [r7, #28]
 8000920:	fbb2 f3f3 	udiv	r3, r2, r3
 8000924:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000926:	e010      	b.n	800094a <I2C_Init+0xf2>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	4613      	mov	r3, r2
 800092e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000932:	189b      	adds	r3, r3, r2
 8000934:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8000938:	189b      	adds	r3, r3, r2
 800093a:	69fa      	ldr	r2, [r7, #28]
 800093c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000940:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8000942:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000948:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & CCR_CCR_Set) == 0)
 800094a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800094c:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8000950:	ea4f 5313 	mov.w	r3, r3, lsr #20
 8000954:	2b00      	cmp	r3, #0
 8000956:	d103      	bne.n	8000960 <I2C_Init+0x108>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8000958:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800095a:	f043 0301 	orr.w	r3, r3, #1
 800095e:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | CCR_FS_Set);
 8000960:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000962:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000964:	ea42 0303 	orr.w	r3, r2, r3
 8000968:	b29b      	uxth	r3, r3
 800096a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800096e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000972:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8000974:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000976:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800097a:	fb02 f303 	mul.w	r3, r2, r3
 800097e:	4a21      	ldr	r2, [pc, #132]	; (8000a04 <I2C_Init+0x1ac>)
 8000980:	fb82 1203 	smull	r1, r2, r2, r3
 8000984:	ea4f 12a2 	mov.w	r2, r2, asr #6
 8000988:	ea4f 73e3 	mov.w	r3, r3, asr #31
 800098c:	1ad3      	subs	r3, r2, r3
 800098e:	b29b      	uxth	r3, r3
 8000990:	f103 0301 	add.w	r3, r3, #1
 8000994:	b29a      	uxth	r2, r3
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800099e:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= CR1_PE_Set;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	881b      	ldrh	r3, [r3, #0]
 80009a4:	b29b      	uxth	r3, r3
 80009a6:	f043 0301 	orr.w	r3, r3, #1
 80009aa:	b29a      	uxth	r2, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	881b      	ldrh	r3, [r3, #0]
 80009b4:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_Mask;
 80009b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80009b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80009bc:	f023 030a 	bic.w	r3, r3, #10
 80009c0:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	889a      	ldrh	r2, [r3, #4]
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	895b      	ldrh	r3, [r3, #10]
 80009ca:	ea42 0303 	orr.w	r3, r2, r3
 80009ce:	b29a      	uxth	r2, r3
 80009d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80009d2:	ea42 0303 	orr.w	r3, r2, r3
 80009d6:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80009dc:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	899a      	ldrh	r2, [r3, #12]
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	891b      	ldrh	r3, [r3, #8]
 80009e6:	ea42 0303 	orr.w	r3, r2, r3
 80009ea:	b29a      	uxth	r2, r3
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	811a      	strh	r2, [r3, #8]
}
 80009f0:	f107 0728 	add.w	r7, r7, #40	; 0x28
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	007a1200 	.word	0x007a1200
 80009fc:	431bde83 	.word	0x431bde83
 8000a00:	000186a0 	.word	0x000186a0
 8000a04:	10624dd3 	.word	0x10624dd3

08000a08 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	460b      	mov	r3, r1
 8000a12:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000a14:	78fb      	ldrb	r3, [r7, #3]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d008      	beq.n	8000a2c <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= CR1_PE_Set;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	881b      	ldrh	r3, [r3, #0]
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	b29a      	uxth	r2, r3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	801a      	strh	r2, [r3, #0]
 8000a2a:	e007      	b.n	8000a3c <I2C_Cmd+0x34>
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= CR1_PE_Reset;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	881b      	ldrh	r3, [r3, #0]
 8000a30:	b29b      	uxth	r3, r3
 8000a32:	f023 0301 	bic.w	r3, r3, #1
 8000a36:	b29a      	uxth	r2, r3
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	801a      	strh	r2, [r3, #0]
  }
}
 8000a3c:	f107 070c 	add.w	r7, r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bc80      	pop	{r7}
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	460b      	mov	r3, r1
 8000a52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000a54:	78fb      	ldrb	r3, [r7, #3]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d008      	beq.n	8000a6c <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= CR1_START_Set;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	881b      	ldrh	r3, [r3, #0]
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a64:	b29a      	uxth	r2, r3
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	801a      	strh	r2, [r3, #0]
 8000a6a:	e007      	b.n	8000a7c <I2C_GenerateSTART+0x34>
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= CR1_START_Reset;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	881b      	ldrh	r3, [r3, #0]
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a76:	b29a      	uxth	r2, r3
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	801a      	strh	r2, [r3, #0]
  }
}
 8000a7c:	f107 070c 	add.w	r7, r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bc80      	pop	{r7}
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	460b      	mov	r3, r1
 8000a92:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000a94:	78fb      	ldrb	r3, [r7, #3]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d008      	beq.n	8000aac <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= CR1_STOP_Set;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	881b      	ldrh	r3, [r3, #0]
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	801a      	strh	r2, [r3, #0]
 8000aaa:	e007      	b.n	8000abc <I2C_GenerateSTOP+0x34>
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= CR1_STOP_Reset;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	881b      	ldrh	r3, [r3, #0]
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000ab6:	b29a      	uxth	r2, r3
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	801a      	strh	r2, [r3, #0]
  }
}
 8000abc:	f107 070c 	add.w	r7, r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	460b      	mov	r3, r1
 8000ad2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000ad4:	78fb      	ldrb	r3, [r7, #3]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d008      	beq.n	8000aec <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= CR1_ACK_Set;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	881b      	ldrh	r3, [r3, #0]
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ae4:	b29a      	uxth	r2, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	801a      	strh	r2, [r3, #0]
 8000aea:	e007      	b.n	8000afc <I2C_AcknowledgeConfig+0x34>
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= CR1_ACK_Reset;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	881b      	ldrh	r3, [r3, #0]
 8000af0:	b29b      	uxth	r3, r3
 8000af2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	801a      	strh	r2, [r3, #0]
  }
}
 8000afc:	f107 070c 	add.w	r7, r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bc80      	pop	{r7}
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <I2C_SendData>:
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	460b      	mov	r3, r1
 8000b12:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8000b14:	78fb      	ldrb	r3, [r7, #3]
 8000b16:	b29a      	uxth	r2, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	821a      	strh	r2, [r3, #16]
}
 8000b1c:	f107 070c 	add.w	r7, r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bc80      	pop	{r7}
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	8a1b      	ldrh	r3, [r3, #16]
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	b2db      	uxtb	r3, r3
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f107 070c 	add.w	r7, r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr

08000b44 <I2C_Send7bitAddress>:
  *     @arg I2C_Direction_Transmitter: Transmitter mode
  *     @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	4613      	mov	r3, r2
 8000b4e:	460a      	mov	r2, r1
 8000b50:	70fa      	strb	r2, [r7, #3]
 8000b52:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8000b54:	78bb      	ldrb	r3, [r7, #2]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d004      	beq.n	8000b64 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= OAR1_ADD0_Set;
 8000b5a:	78fb      	ldrb	r3, [r7, #3]
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	70fb      	strb	r3, [r7, #3]
 8000b62:	e003      	b.n	8000b6c <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= OAR1_ADD0_Reset;
 8000b64:	78fb      	ldrb	r3, [r7, #3]
 8000b66:	f023 0301 	bic.w	r3, r3, #1
 8000b6a:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8000b6c:	78fb      	ldrb	r3, [r7, #3]
 8000b6e:	b29a      	uxth	r2, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	821a      	strh	r2, [r3, #16]
}
 8000b74:	f107 070c 	add.w	r7, r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bc80      	pop	{r7}
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  * - SUCCESS: Last event is equal to the I2C_EVENT
  * - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b087      	sub	sp, #28
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 8000b8a:	f04f 0300 	mov.w	r3, #0
 8000b8e:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8000b90:	f04f 0300 	mov.w	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	f04f 0300 	mov.w	r3, #0
 8000b9a:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8000b9c:	f04f 0300 	mov.w	r3, #0
 8000ba0:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	8a9b      	ldrh	r3, [r3, #20]
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	8b1b      	ldrh	r3, [r3, #24]
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8000bb8:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_Mask;
 8000bba:	68fa      	ldr	r2, [r7, #12]
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	ea42 0303 	orr.w	r3, r2, r3
 8000bc2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000bc6:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8000bc8:	693a      	ldr	r2, [r7, #16]
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	401a      	ands	r2, r3
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d103      	bne.n	8000bdc <I2C_CheckEvent+0x5c>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8000bd4:	f04f 0301 	mov.w	r3, #1
 8000bd8:	75fb      	strb	r3, [r7, #23]
 8000bda:	e002      	b.n	8000be2 <I2C_CheckEvent+0x62>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8000bdc:	f04f 0300 	mov.w	r3, #0
 8000be0:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8000be2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	f107 071c 	add.w	r7, r7, #28
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr

08000bf0 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b08b      	sub	sp, #44	; 0x2c
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8000bf8:	f04f 0300 	mov.w	r3, #0
 8000bfc:	623b      	str	r3, [r7, #32]
 8000bfe:	f04f 0300 	mov.w	r3, #0
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
 8000c04:	f04f 0300 	mov.w	r3, #0
 8000c08:	61fb      	str	r3, [r7, #28]
 8000c0a:	f04f 0300 	mov.w	r3, #0
 8000c0e:	61bb      	str	r3, [r7, #24]

#ifdef  STM32F10X_CL
  uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
 8000c10:	f04f 0300 	mov.w	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
 8000c16:	f04f 0300 	mov.w	r3, #0
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	f04f 0300 	mov.w	r3, #0
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	f04f 0300 	mov.w	r3, #0
 8000c26:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8000c28:	4b69      	ldr	r3, [pc, #420]	; (8000dd0 <RCC_GetClocksFreq+0x1e0>)
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f003 030c 	and.w	r3, r3, #12
 8000c30:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 8000c32:	6a3b      	ldr	r3, [r7, #32]
 8000c34:	2b04      	cmp	r3, #4
 8000c36:	d007      	beq.n	8000c48 <RCC_GetClocksFreq+0x58>
 8000c38:	2b08      	cmp	r3, #8
 8000c3a:	d009      	beq.n	8000c50 <RCC_GetClocksFreq+0x60>
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d165      	bne.n	8000d0c <RCC_GetClocksFreq+0x11c>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4a64      	ldr	r2, [pc, #400]	; (8000dd4 <RCC_GetClocksFreq+0x1e4>)
 8000c44:	601a      	str	r2, [r3, #0]
      break;
 8000c46:	e065      	b.n	8000d14 <RCC_GetClocksFreq+0x124>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4a63      	ldr	r2, [pc, #396]	; (8000dd8 <RCC_GetClocksFreq+0x1e8>)
 8000c4c:	601a      	str	r2, [r3, #0]
      break;
 8000c4e:	e061      	b.n	8000d14 <RCC_GetClocksFreq+0x124>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8000c50:	4b5f      	ldr	r3, [pc, #380]	; (8000dd0 <RCC_GetClocksFreq+0x1e0>)
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8000c5a:	4b5d      	ldr	r3, [pc, #372]	; (8000dd0 <RCC_GetClocksFreq+0x1e0>)
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c62:	61fb      	str	r3, [r7, #28]
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
        }
 #endif
      }
#else
      pllmull = pllmull >> 18;
 8000c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c66:	ea4f 4393 	mov.w	r3, r3, lsr #18
 8000c6a:	627b      	str	r3, [r7, #36]	; 0x24
      
      if (pllmull != 0x0D)
 8000c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c6e:	2b0d      	cmp	r3, #13
 8000c70:	d004      	beq.n	8000c7c <RCC_GetClocksFreq+0x8c>
      {
         pllmull += 2;
 8000c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c74:	f103 0302 	add.w	r3, r3, #2
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
 8000c7a:	e002      	b.n	8000c82 <RCC_GetClocksFreq+0x92>
      }
      else
      { /* PLL multiplication factor = PLL input clock * 6.5 */
        pllmull = 13 / 2; 
 8000c7c:	f04f 0306 	mov.w	r3, #6
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
      }
            
      if (pllsource == 0x00)
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d106      	bne.n	8000c96 <RCC_GetClocksFreq+0xa6>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8000c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8a:	4a54      	ldr	r2, [pc, #336]	; (8000ddc <RCC_GetClocksFreq+0x1ec>)
 8000c8c:	fb02 f203 	mul.w	r2, r2, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8000c94:	e03e      	b.n	8000d14 <RCC_GetClocksFreq+0x124>
      }
      else
      {/* PREDIV1 selected as PLL clock entry */
        
        /* Get PREDIV1 clock source and division factor */
        prediv1source = RCC->CFGR2 & CFGR2_PREDIV1SRC;
 8000c96:	4b4e      	ldr	r3, [pc, #312]	; (8000dd0 <RCC_GetClocksFreq+0x1e0>)
 8000c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c9e:	617b      	str	r3, [r7, #20]
        prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
 8000ca0:	4b4b      	ldr	r3, [pc, #300]	; (8000dd0 <RCC_GetClocksFreq+0x1e0>)
 8000ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca4:	f003 030f 	and.w	r3, r3, #15
 8000ca8:	f103 0301 	add.w	r3, r3, #1
 8000cac:	613b      	str	r3, [r7, #16]
        
        if (prediv1source == 0)
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d109      	bne.n	8000cc8 <RCC_GetClocksFreq+0xd8>
        { /* HSE oscillator clock selected as PREDIV1 clock entry */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;          
 8000cb4:	4a48      	ldr	r2, [pc, #288]	; (8000dd8 <RCC_GetClocksFreq+0x1e8>)
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cbe:	fb02 f203 	mul.w	r2, r2, r3
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8000cc6:	e025      	b.n	8000d14 <RCC_GetClocksFreq+0x124>
        }
        else
        {/* PLL2 clock selected as PREDIV1 clock entry */
          
          /* Get PREDIV2 division factor and PLL2 multiplication factor */
          prediv2factor = ((RCC->CFGR2 & CFGR2_PREDIV2) >> 4) + 1;
 8000cc8:	4b41      	ldr	r3, [pc, #260]	; (8000dd0 <RCC_GetClocksFreq+0x1e0>)
 8000cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ccc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000cd0:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8000cd4:	f103 0301 	add.w	r3, r3, #1
 8000cd8:	60fb      	str	r3, [r7, #12]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
 8000cda:	4b3d      	ldr	r3, [pc, #244]	; (8000dd0 <RCC_GetClocksFreq+0x1e0>)
 8000cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cde:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000ce2:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8000ce6:	f103 0302 	add.w	r3, r3, #2
 8000cea:	60bb      	str	r3, [r7, #8]
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
 8000cec:	4a3a      	ldr	r2, [pc, #232]	; (8000dd8 <RCC_GetClocksFreq+0x1e8>)
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cf4:	68ba      	ldr	r2, [r7, #8]
 8000cf6:	fb02 f203 	mul.w	r2, r2, r3
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d02:	fb02 f203 	mul.w	r2, r2, r3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	601a      	str	r2, [r3, #0]
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8000d0a:	e003      	b.n	8000d14 <RCC_GetClocksFreq+0x124>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4a31      	ldr	r2, [pc, #196]	; (8000dd4 <RCC_GetClocksFreq+0x1e4>)
 8000d10:	601a      	str	r2, [r3, #0]
      break;
 8000d12:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8000d14:	4b2e      	ldr	r3, [pc, #184]	; (8000dd0 <RCC_GetClocksFreq+0x1e0>)
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d1c:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000d1e:	6a3b      	ldr	r3, [r7, #32]
 8000d20:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8000d24:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000d26:	4a2e      	ldr	r2, [pc, #184]	; (8000de0 <RCC_GetClocksFreq+0x1f0>)
 8000d28:	6a3b      	ldr	r3, [r7, #32]
 8000d2a:	18d3      	adds	r3, r2, r3
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	61bb      	str	r3, [r7, #24]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	fa22 f203 	lsr.w	r2, r2, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8000d40:	4b23      	ldr	r3, [pc, #140]	; (8000dd0 <RCC_GetClocksFreq+0x1e0>)
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000d48:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 8000d4a:	6a3b      	ldr	r3, [r7, #32]
 8000d4c:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8000d50:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000d52:	4a23      	ldr	r2, [pc, #140]	; (8000de0 <RCC_GetClocksFreq+0x1f0>)
 8000d54:	6a3b      	ldr	r3, [r7, #32]
 8000d56:	18d3      	adds	r3, r2, r3
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	61bb      	str	r3, [r7, #24]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	685a      	ldr	r2, [r3, #4]
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	fa22 f203 	lsr.w	r2, r2, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8000d6c:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <RCC_GetClocksFreq+0x1e0>)
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000d74:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8000d76:	6a3b      	ldr	r3, [r7, #32]
 8000d78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d7c:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000d7e:	4a18      	ldr	r2, [pc, #96]	; (8000de0 <RCC_GetClocksFreq+0x1f0>)
 8000d80:	6a3b      	ldr	r3, [r7, #32]
 8000d82:	18d3      	adds	r3, r2, r3
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	61bb      	str	r3, [r7, #24]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	685a      	ldr	r2, [r3, #4]
 8000d8e:	69bb      	ldr	r3, [r7, #24]
 8000d90:	fa22 f203 	lsr.w	r2, r2, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8000d98:	4b0d      	ldr	r3, [pc, #52]	; (8000dd0 <RCC_GetClocksFreq+0x1e0>)
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000da0:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 14;
 8000da2:	6a3b      	ldr	r3, [r7, #32]
 8000da4:	ea4f 3393 	mov.w	r3, r3, lsr #14
 8000da8:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000daa:	4a0e      	ldr	r2, [pc, #56]	; (8000de4 <RCC_GetClocksFreq+0x1f4>)
 8000dac:	6a3b      	ldr	r3, [r7, #32]
 8000dae:	18d3      	adds	r3, r2, r3
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	61bb      	str	r3, [r7, #24]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	68da      	ldr	r2, [r3, #12]
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	611a      	str	r2, [r3, #16]
}
 8000dc4:	f107 072c 	add.w	r7, r7, #44	; 0x2c
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bc80      	pop	{r7}
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	007a1200 	.word	0x007a1200
 8000dd8:	017d7840 	.word	0x017d7840
 8000ddc:	003d0900 	.word	0x003d0900
 8000de0:	20000000 	.word	0x20000000
 8000de4:	20000010 	.word	0x20000010

08000de8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	460b      	mov	r3, r1
 8000df2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000df4:	78fb      	ldrb	r3, [r7, #3]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d007      	beq.n	8000e0a <RCC_APB2PeriphClockCmd+0x22>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000dfa:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <RCC_APB2PeriphClockCmd+0x40>)
 8000dfc:	4a0a      	ldr	r2, [pc, #40]	; (8000e28 <RCC_APB2PeriphClockCmd+0x40>)
 8000dfe:	6991      	ldr	r1, [r2, #24]
 8000e00:	687a      	ldr	r2, [r7, #4]
 8000e02:	ea41 0202 	orr.w	r2, r1, r2
 8000e06:	619a      	str	r2, [r3, #24]
 8000e08:	e008      	b.n	8000e1c <RCC_APB2PeriphClockCmd+0x34>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000e0a:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <RCC_APB2PeriphClockCmd+0x40>)
 8000e0c:	4a06      	ldr	r2, [pc, #24]	; (8000e28 <RCC_APB2PeriphClockCmd+0x40>)
 8000e0e:	6991      	ldr	r1, [r2, #24]
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	ea6f 0202 	mvn.w	r2, r2
 8000e16:	ea01 0202 	and.w	r2, r1, r2
 8000e1a:	619a      	str	r2, [r3, #24]
  }
}
 8000e1c:	f107 070c 	add.w	r7, r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bc80      	pop	{r7}
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	40021000 	.word	0x40021000

08000e2c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	460b      	mov	r3, r1
 8000e36:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000e38:	78fb      	ldrb	r3, [r7, #3]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d007      	beq.n	8000e4e <RCC_APB1PeriphClockCmd+0x22>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000e3e:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <RCC_APB1PeriphClockCmd+0x40>)
 8000e40:	4a0a      	ldr	r2, [pc, #40]	; (8000e6c <RCC_APB1PeriphClockCmd+0x40>)
 8000e42:	69d1      	ldr	r1, [r2, #28]
 8000e44:	687a      	ldr	r2, [r7, #4]
 8000e46:	ea41 0202 	orr.w	r2, r1, r2
 8000e4a:	61da      	str	r2, [r3, #28]
 8000e4c:	e008      	b.n	8000e60 <RCC_APB1PeriphClockCmd+0x34>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000e4e:	4b07      	ldr	r3, [pc, #28]	; (8000e6c <RCC_APB1PeriphClockCmd+0x40>)
 8000e50:	4a06      	ldr	r2, [pc, #24]	; (8000e6c <RCC_APB1PeriphClockCmd+0x40>)
 8000e52:	69d1      	ldr	r1, [r2, #28]
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	ea6f 0202 	mvn.w	r2, r2
 8000e5a:	ea01 0202 	and.w	r2, r1, r2
 8000e5e:	61da      	str	r2, [r3, #28]
  }
}
 8000e60:	f107 070c 	add.w	r7, r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bc80      	pop	{r7}
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	40021000 	.word	0x40021000

08000e70 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08c      	sub	sp, #48	; 0x30
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000e7a:	f04f 0300 	mov.w	r3, #0
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e80:	f04f 0300 	mov.w	r3, #0
 8000e84:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 8000e86:	f04f 0300 	mov.w	r3, #0
 8000e8a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 8000e8c:	f04f 0300 	mov.w	r3, #0
 8000e90:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 8000e92:	f04f 0300 	mov.w	r3, #0
 8000e96:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	8a1b      	ldrh	r3, [r3, #16]
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 8000ea4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ea6:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8000eaa:	ea02 0303 	and.w	r3, r2, r3
 8000eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	88db      	ldrh	r3, [r3, #6]
 8000eb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000eb6:	ea42 0303 	orr.w	r3, r2, r3
 8000eba:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	899b      	ldrh	r3, [r3, #12]
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8000ecc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ece:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 8000ed2:	ea02 0303 	and.w	r3, r2, r3
 8000ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	889a      	ldrh	r2, [r3, #4]
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	891b      	ldrh	r3, [r3, #8]
 8000ee0:	ea42 0303 	orr.w	r3, r2, r3
 8000ee4:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000eea:	ea42 0303 	orr.w	r3, r2, r3
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ef2:	ea42 0303 	orr.w	r3, r2, r3
 8000ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	8a9b      	ldrh	r3, [r3, #20]
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 8000f08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f0a:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8000f0e:	ea02 0303 	and.w	r3, r2, r3
 8000f12:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	899b      	ldrh	r3, [r3, #12]
 8000f18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f1a:	ea42 0303 	orr.w	r3, r2, r3
 8000f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f22:	b29a      	uxth	r2, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000f28:	f107 0308 	add.w	r3, r7, #8
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff fe5f 	bl	8000bf0 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 8000f32:	69fa      	ldr	r2, [r7, #28]
 8000f34:	4b38      	ldr	r3, [pc, #224]	; (8001018 <USART_Init+0x1a8>)
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d102      	bne.n	8000f40 <USART_Init+0xd0>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f3e:	e001      	b.n	8000f44 <USART_Init+0xd4>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	899b      	ldrh	r3, [r3, #12]
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	b21b      	sxth	r3, r3
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	da0f      	bge.n	8000f72 <USART_Init+0x102>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000f52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f54:	4613      	mov	r3, r2
 8000f56:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000f5a:	189b      	adds	r3, r3, r2
 8000f5c:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8000f60:	189a      	adds	r2, r3, r2
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8000f70:	e00e      	b.n	8000f90 <USART_Init+0x120>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000f72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f74:	4613      	mov	r3, r2
 8000f76:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000f7a:	189b      	adds	r3, r3, r2
 8000f7c:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8000f80:	189a      	adds	r2, r3, r2
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 8000f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f92:	4b22      	ldr	r3, [pc, #136]	; (800101c <USART_Init+0x1ac>)
 8000f94:	fba3 1302 	umull	r1, r3, r3, r2
 8000f98:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8000f9c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000fa0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fa4:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8000fa8:	f04f 0264 	mov.w	r2, #100	; 0x64
 8000fac:	fb02 f303 	mul.w	r3, r2, r3
 8000fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	899b      	ldrh	r3, [r3, #12]
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	b21b      	sxth	r3, r3
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	da10      	bge.n	8000fe6 <USART_Init+0x176>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000fc4:	6a3b      	ldr	r3, [r7, #32]
 8000fc6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000fca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8000fce:	4b13      	ldr	r3, [pc, #76]	; (800101c <USART_Init+0x1ac>)
 8000fd0:	fba3 1302 	umull	r1, r3, r3, r2
 8000fd4:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8000fd8:	f003 0307 	and.w	r3, r3, #7
 8000fdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fde:	ea42 0303 	orr.w	r3, r2, r3
 8000fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fe4:	e00f      	b.n	8001006 <USART_Init+0x196>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000fe6:	6a3b      	ldr	r3, [r7, #32]
 8000fe8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000fec:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8000ff0:	4b0a      	ldr	r3, [pc, #40]	; (800101c <USART_Init+0x1ac>)
 8000ff2:	fba3 1302 	umull	r1, r3, r3, r2
 8000ff6:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8000ffa:	f003 030f 	and.w	r3, r3, #15
 8000ffe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001000:	ea42 0303 	orr.w	r3, r2, r3
 8001004:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8001006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001008:	b29a      	uxth	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	811a      	strh	r2, [r3, #8]
}
 800100e:	f107 0730 	add.w	r7, r7, #48	; 0x30
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40013800 	.word	0x40013800
 800101c:	51eb851f 	.word	0x51eb851f

08001020 <USART_ClockInit>:
  *         USART peripheral.  
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
 800102a:	f04f 0300 	mov.w	r3, #0
 800102e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	8a1b      	ldrh	r3, [r3, #16]
 8001034:	b29b      	uxth	r3, r3
 8001036:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
 8001038:	68fa      	ldr	r2, [r7, #12]
 800103a:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
 800103e:	ea02 0303 	and.w	r3, r2, r3
 8001042:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	881a      	ldrh	r2, [r3, #0]
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 800104c:	ea42 0303 	orr.w	r3, r2, r3
 8001050:	b29a      	uxth	r2, r3
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	889b      	ldrh	r3, [r3, #4]
 8001056:	ea42 0303 	orr.w	r3, r2, r3
 800105a:	b29a      	uxth	r2, r3
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	88db      	ldrh	r3, [r3, #6]
 8001060:	ea42 0303 	orr.w	r3, r2, r3
 8001064:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8001066:	68fa      	ldr	r2, [r7, #12]
 8001068:	ea42 0303 	orr.w	r3, r2, r3
 800106c:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	b29a      	uxth	r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	821a      	strh	r2, [r3, #16]
}
 8001076:	f107 0714 	add.w	r7, r7, #20
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr

08001080 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f04f 0200 	mov.w	r2, #0
 800108e:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f04f 0200 	mov.w	r2, #0
 8001096:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f04f 0200 	mov.w	r2, #0
 800109e:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f04f 0200 	mov.w	r2, #0
 80010a6:	80da      	strh	r2, [r3, #6]
}
 80010a8:	f107 070c 	add.w	r7, r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bc80      	pop	{r7}
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop

080010b4 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	460b      	mov	r3, r1
 80010be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80010c0:	78fb      	ldrb	r3, [r7, #3]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d008      	beq.n	80010d8 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	899b      	ldrh	r3, [r3, #12]
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	819a      	strh	r2, [r3, #12]
 80010d6:	e007      	b.n	80010e8 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	899b      	ldrh	r3, [r3, #12]
 80010dc:	b29b      	uxth	r3, r3
 80010de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	819a      	strh	r2, [r3, #12]
  }
}
 80010e8:	f107 070c 	add.w	r7, r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bc80      	pop	{r7}
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop

080010f4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b087      	sub	sp, #28
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	4613      	mov	r3, r2
 80010fe:	460a      	mov	r2, r1
 8001100:	807a      	strh	r2, [r7, #2]
 8001102:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8001104:	f04f 0300 	mov.w	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
 800110a:	f04f 0300 	mov.w	r3, #0
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	f04f 0300 	mov.w	r3, #0
 8001114:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8001116:	f04f 0300 	mov.w	r3, #0
 800111a:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001120:	887b      	ldrh	r3, [r7, #2]
 8001122:	b2db      	uxtb	r3, r3
 8001124:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8001128:	b2db      	uxtb	r3, r3
 800112a:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
 800112c:	887b      	ldrh	r3, [r7, #2]
 800112e:	f003 031f 	and.w	r3, r3, #31
 8001132:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f04f 0201 	mov.w	r2, #1
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d104      	bne.n	8001150 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x0C;
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	f103 030c 	add.w	r3, r3, #12
 800114c:	617b      	str	r3, [r7, #20]
 800114e:	e00b      	b.n	8001168 <USART_ITConfig+0x74>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	2b02      	cmp	r3, #2
 8001154:	d104      	bne.n	8001160 <USART_ITConfig+0x6c>
  {
    usartxbase += 0x10;
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	f103 0310 	add.w	r3, r3, #16
 800115c:	617b      	str	r3, [r7, #20]
 800115e:	e003      	b.n	8001168 <USART_ITConfig+0x74>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	f103 0314 	add.w	r3, r3, #20
 8001166:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8001168:	787b      	ldrb	r3, [r7, #1]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d007      	beq.n	800117e <USART_ITConfig+0x8a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	697a      	ldr	r2, [r7, #20]
 8001172:	6811      	ldr	r1, [r2, #0]
 8001174:	68ba      	ldr	r2, [r7, #8]
 8001176:	ea41 0202 	orr.w	r2, r1, r2
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	e008      	b.n	8001190 <USART_ITConfig+0x9c>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	697a      	ldr	r2, [r7, #20]
 8001182:	6811      	ldr	r1, [r2, #0]
 8001184:	68ba      	ldr	r2, [r7, #8]
 8001186:	ea6f 0202 	mvn.w	r2, r2
 800118a:	ea01 0202 	and.w	r2, r1, r2
 800118e:	601a      	str	r2, [r3, #0]
  }
}
 8001190:	f107 071c 	add.w	r7, r7, #28
 8001194:	46bd      	mov	sp, r7
 8001196:	bc80      	pop	{r7}
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop

0800119c <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 80011a8:	887b      	ldrh	r3, [r7, #2]
 80011aa:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 80011ae:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	809a      	strh	r2, [r3, #4]
}
 80011b8:	f107 070c 	add.w	r7, r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	bc80      	pop	{r7}
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop

080011c4 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	889b      	ldrh	r3, [r3, #4]
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 80011d6:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 80011da:	b29b      	uxth	r3, r3
}
 80011dc:	4618      	mov	r0, r3
 80011de:	f107 070c 	add.w	r7, r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr

080011e8 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	460b      	mov	r3, r1
 80011f2:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80011f4:	f04f 0300 	mov.w	r3, #0
 80011f8:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	881b      	ldrh	r3, [r3, #0]
 80011fe:	b29a      	uxth	r2, r3
 8001200:	887b      	ldrh	r3, [r7, #2]
 8001202:	ea02 0303 	and.w	r3, r2, r3
 8001206:	b29b      	uxth	r3, r3
 8001208:	2b00      	cmp	r3, #0
 800120a:	d003      	beq.n	8001214 <USART_GetFlagStatus+0x2c>
  {
    bitstatus = SET;
 800120c:	f04f 0301 	mov.w	r3, #1
 8001210:	73fb      	strb	r3, [r7, #15]
 8001212:	e002      	b.n	800121a <USART_GetFlagStatus+0x32>
  }
  else
  {
    bitstatus = RESET;
 8001214:	f04f 0300 	mov.w	r3, #0
 8001218:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800121a:	7bfb      	ldrb	r3, [r7, #15]
}
 800121c:	4618      	mov	r0, r3
 800121e:	f107 0714 	add.w	r7, r7, #20
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr

08001228 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8001228:	b480      	push	{r7}
 800122a:	b087      	sub	sp, #28
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8001234:	f04f 0300 	mov.w	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	f04f 0300 	mov.w	r3, #0
 800123e:	617b      	str	r3, [r7, #20]
 8001240:	f04f 0300 	mov.w	r3, #0
 8001244:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8001246:	f04f 0300 	mov.w	r3, #0
 800124a:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800124c:	887b      	ldrh	r3, [r7, #2]
 800124e:	b2db      	uxtb	r3, r3
 8001250:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8001254:	b2db      	uxtb	r3, r3
 8001256:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
 8001258:	887b      	ldrh	r3, [r7, #2]
 800125a:	f003 031f 	and.w	r3, r3, #31
 800125e:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	f04f 0201 	mov.w	r2, #1
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d107      	bne.n	8001282 <USART_GetITStatus+0x5a>
  {
    itmask &= USARTx->CR1;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	899b      	ldrh	r3, [r3, #12]
 8001276:	b29b      	uxth	r3, r3
 8001278:	697a      	ldr	r2, [r7, #20]
 800127a:	ea02 0303 	and.w	r3, r2, r3
 800127e:	617b      	str	r3, [r7, #20]
 8001280:	e011      	b.n	80012a6 <USART_GetITStatus+0x7e>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	2b02      	cmp	r3, #2
 8001286:	d107      	bne.n	8001298 <USART_GetITStatus+0x70>
  {
    itmask &= USARTx->CR2;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	8a1b      	ldrh	r3, [r3, #16]
 800128c:	b29b      	uxth	r3, r3
 800128e:	697a      	ldr	r2, [r7, #20]
 8001290:	ea02 0303 	and.w	r3, r2, r3
 8001294:	617b      	str	r3, [r7, #20]
 8001296:	e006      	b.n	80012a6 <USART_GetITStatus+0x7e>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	8a9b      	ldrh	r3, [r3, #20]
 800129c:	b29b      	uxth	r3, r3
 800129e:	697a      	ldr	r2, [r7, #20]
 80012a0:	ea02 0303 	and.w	r3, r2, r3
 80012a4:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 80012a6:	887b      	ldrh	r3, [r7, #2]
 80012a8:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f04f 0201 	mov.w	r2, #1
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	881b      	ldrh	r3, [r3, #0]
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	ea02 0303 	and.w	r3, r2, r3
 80012c8:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d006      	beq.n	80012de <USART_GetITStatus+0xb6>
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d003      	beq.n	80012de <USART_GetITStatus+0xb6>
  {
    bitstatus = SET;
 80012d6:	f04f 0301 	mov.w	r3, #1
 80012da:	74fb      	strb	r3, [r7, #19]
 80012dc:	e002      	b.n	80012e4 <USART_GetITStatus+0xbc>
  }
  else
  {
    bitstatus = RESET;
 80012de:	f04f 0300 	mov.w	r3, #0
 80012e2:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 80012e4:	7cfb      	ldrb	r3, [r7, #19]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	f107 071c 	add.w	r7, r7, #28
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop

080012f4 <_ZN8KamodRGBC1Eh3I2C>:

KamodRGB::KamodRGB()
{

}
KamodRGB::KamodRGB(u8 addr, I2C i2c){
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	4638      	mov	r0, r7
 80012fe:	e880 000c 	stmia.w	r0, {r2, r3}
 8001302:	460b      	mov	r3, r1
 8001304:	72fb      	strb	r3, [r7, #11]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	4618      	mov	r0, r3
 800130a:	f000 fbcb 	bl	8001aa4 <_ZN3I2CC1Ev>
	init(addr,i2c);
 800130e:	7afb      	ldrb	r3, [r7, #11]
 8001310:	68f8      	ldr	r0, [r7, #12]
 8001312:	4619      	mov	r1, r3
 8001314:	463b      	mov	r3, r7
 8001316:	cb0c      	ldmia	r3, {r2, r3}
 8001318:	f000 f806 	bl	8001328 <_ZN8KamodRGB4initEh3I2C>
}
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4618      	mov	r0, r3
 8001320:	f107 0710 	add.w	r7, r7, #16
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <_ZN8KamodRGB4initEh3I2C>:
void KamodRGB::init(u8 add, I2C i)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b088      	sub	sp, #32
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	4638      	mov	r0, r7
 8001332:	e880 000c 	stmia.w	r0, {r2, r3}
 8001336:	460b      	mov	r3, r1
 8001338:	72fb      	strb	r3, [r7, #11]
	i2c=i;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	463a      	mov	r2, r7
 800133e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001342:	e883 0003 	stmia.w	r3, {r0, r1}
	addr=add;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	7afa      	ldrb	r2, [r7, #11]
 800134a:	721a      	strb	r2, [r3, #8]

	unsigned char B[3][2]={{0,0},{1,0},{8,255}};
 800134c:	4a24      	ldr	r2, [pc, #144]	; (80013e0 <_ZN8KamodRGB4initEh3I2C+0xb8>)
 800134e:	f107 0314 	add.w	r3, r7, #20
 8001352:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001356:	6018      	str	r0, [r3, #0]
 8001358:	f103 0304 	add.w	r3, r3, #4
 800135c:	8019      	strh	r1, [r3, #0]
	for(int i=0;i<3;i++)
 800135e:	f04f 0300 	mov.w	r3, #0
 8001362:	61fb      	str	r3, [r7, #28]
 8001364:	e013      	b.n	800138e <_ZN8KamodRGB4initEh3I2C+0x66>
	{
		i2c.sendBytes(addr,B[i],2);
 8001366:	68f9      	ldr	r1, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	7a1a      	ldrb	r2, [r3, #8]
 800136c:	f107 0014 	add.w	r0, r7, #20
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001376:	18c3      	adds	r3, r0, r3
 8001378:	4608      	mov	r0, r1
 800137a:	4611      	mov	r1, r2
 800137c:	461a      	mov	r2, r3
 800137e:	f04f 0302 	mov.w	r3, #2
 8001382:	f000 fc19 	bl	8001bb8 <_ZN3I2C9sendBytesEhPhh>
{
	i2c=i;
	addr=add;

	unsigned char B[3][2]={{0,0},{1,0},{8,255}};
	for(int i=0;i<3;i++)
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	f103 0301 	add.w	r3, r3, #1
 800138c:	61fb      	str	r3, [r7, #28]
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	2b02      	cmp	r3, #2
 8001392:	bfcc      	ite	gt
 8001394:	2300      	movgt	r3, #0
 8001396:	2301      	movle	r3, #1
 8001398:	b2db      	uxtb	r3, r3
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1e3      	bne.n	8001366 <_ZN8KamodRGB4initEh3I2C+0x3e>
	{
		i2c.sendBytes(addr,B[i],2);
	}

	light(KAmber,0);
 800139e:	68f8      	ldr	r0, [r7, #12]
 80013a0:	f04f 0102 	mov.w	r1, #2
 80013a4:	f04f 0200 	mov.w	r2, #0
 80013a8:	f000 f81c 	bl	80013e4 <_ZN8KamodRGB5lightE14KamodRGBColorsh>
	light(KRed,0);
 80013ac:	68f8      	ldr	r0, [r7, #12]
 80013ae:	f04f 0104 	mov.w	r1, #4
 80013b2:	f04f 0200 	mov.w	r2, #0
 80013b6:	f000 f815 	bl	80013e4 <_ZN8KamodRGB5lightE14KamodRGBColorsh>
	light(KGreen,0);
 80013ba:	68f8      	ldr	r0, [r7, #12]
 80013bc:	f04f 0105 	mov.w	r1, #5
 80013c0:	f04f 0200 	mov.w	r2, #0
 80013c4:	f000 f80e 	bl	80013e4 <_ZN8KamodRGB5lightE14KamodRGBColorsh>
	light(KBlue,0);
 80013c8:	68f8      	ldr	r0, [r7, #12]
 80013ca:	f04f 0103 	mov.w	r1, #3
 80013ce:	f04f 0200 	mov.w	r2, #0
 80013d2:	f000 f807 	bl	80013e4 <_ZN8KamodRGB5lightE14KamodRGBColorsh>
}
 80013d6:	f107 0720 	add.w	r7, r7, #32
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	08001eb0 	.word	0x08001eb0

080013e4 <_ZN8KamodRGB5lightE14KamodRGBColorsh>:

void KamodRGB::light(KamodRGBColors color, u8 val)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	4613      	mov	r3, r2
 80013ee:	460a      	mov	r2, r1
 80013f0:	70fa      	strb	r2, [r7, #3]
 80013f2:	70bb      	strb	r3, [r7, #2]
	unsigned char B[2]={color,val};
 80013f4:	78fb      	ldrb	r3, [r7, #3]
 80013f6:	733b      	strb	r3, [r7, #12]
 80013f8:	78bb      	ldrb	r3, [r7, #2]
 80013fa:	737b      	strb	r3, [r7, #13]
	i2c.sendBytes(addr,B,2);
 80013fc:	6879      	ldr	r1, [r7, #4]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	7a1a      	ldrb	r2, [r3, #8]
 8001402:	f107 030c 	add.w	r3, r7, #12
 8001406:	4608      	mov	r0, r1
 8001408:	4611      	mov	r1, r2
 800140a:	461a      	mov	r2, r3
 800140c:	f04f 0302 	mov.w	r3, #2
 8001410:	f000 fbd2 	bl	8001bb8 <_ZN3I2C9sendBytesEhPhh>
}
 8001414:	f107 0710 	add.w	r7, r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <NVIC_SetPriority>:
 * interrupt, or negative to specify an internal (core) interrupt.
 *
 * Note: The priority cannot be set for every core interrupt.
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	6039      	str	r1, [r7, #0]
 8001426:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8001428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142c:	2b00      	cmp	r3, #0
 800142e:	da0d      	bge.n	800144c <NVIC_SetPriority+0x30>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M3 System Interrupts */
 8001430:	490e      	ldr	r1, [pc, #56]	; (800146c <NVIC_SetPriority+0x50>)
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	f003 030f 	and.w	r3, r3, #15
 8001438:	f1a3 0304 	sub.w	r3, r3, #4
 800143c:	683a      	ldr	r2, [r7, #0]
 800143e:	b2d2      	uxtb	r2, r2
 8001440:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8001444:	b2d2      	uxtb	r2, r2
 8001446:	18cb      	adds	r3, r1, r3
 8001448:	761a      	strb	r2, [r3, #24]
 800144a:	e00a      	b.n	8001462 <NVIC_SetPriority+0x46>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800144c:	4908      	ldr	r1, [pc, #32]	; (8001470 <NVIC_SetPriority+0x54>)
 800144e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001452:	683a      	ldr	r2, [r7, #0]
 8001454:	b2d2      	uxtb	r2, r2
 8001456:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800145a:	b2d2      	uxtb	r2, r2
 800145c:	18cb      	adds	r3, r1, r3
 800145e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001462:	f107 070c 	add.w	r7, r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr
 800146c:	e000ed00 	.word	0xe000ed00
 8001470:	e000e100 	.word	0xe000e100

08001474 <SysTick_Config>:
 * Initialise the system tick timer and its interrupt and start the
 * system tick timer / counter in free running mode to generate 
 * periodical interrupts.
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{ 
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001482:	429a      	cmp	r2, r3
 8001484:	d902      	bls.n	800148c <SysTick_Config+0x18>
 8001486:	f04f 0301 	mov.w	r3, #1
 800148a:	e016      	b.n	80014ba <SysTick_Config+0x46>
                                                               
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 800148c:	4b0d      	ldr	r3, [pc, #52]	; (80014c4 <SysTick_Config+0x50>)
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001494:	f102 32ff 	add.w	r2, r2, #4294967295
 8001498:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 800149a:	f04f 30ff 	mov.w	r0, #4294967295
 800149e:	f04f 010f 	mov.w	r1, #15
 80014a2:	f7ff ffbb 	bl	800141c <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80014a6:	4b07      	ldr	r3, [pc, #28]	; (80014c4 <SysTick_Config+0x50>)
 80014a8:	f04f 0200 	mov.w	r2, #0
 80014ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
                   SysTick_CTRL_TICKINT_Msk   | 
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
 80014ae:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <SysTick_Config+0x50>)
 80014b0:	f04f 0207 	mov.w	r2, #7
 80014b4:	601a      	str	r2, [r3, #0]
  return (0);                                                  /* Function successful */
 80014b6:	f04f 0300 	mov.w	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	f107 0708 	add.w	r7, r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	e000e010 	.word	0xe000e010

080014c8 <main>:
LED YellowLED;
USART Console;


int main()
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08c      	sub	sp, #48	; 0x30
 80014cc:	af00      	add	r7, sp, #0
	SystemInit();
 80014ce:	f7fe fed5 	bl	800027c <SystemInit>

	//LEDS
	GreenLED.init(green);
 80014d2:	4860      	ldr	r0, [pc, #384]	; (8001654 <main+0x18c>)
 80014d4:	f04f 0100 	mov.w	r1, #0
 80014d8:	f000 f8da 	bl	8001690 <_ZN3LED4initE5ELEDs>
	YellowLED.init(yellow);
 80014dc:	485e      	ldr	r0, [pc, #376]	; (8001658 <main+0x190>)
 80014de:	f04f 0101 	mov.w	r1, #1
 80014e2:	f000 f8d5 	bl	8001690 <_ZN3LED4initE5ELEDs>

	GreenLED.Off();
 80014e6:	485b      	ldr	r0, [pc, #364]	; (8001654 <main+0x18c>)
 80014e8:	f000 f916 	bl	8001718 <_ZN3LED3OffEv>
	YellowLED.On();
 80014ec:	485a      	ldr	r0, [pc, #360]	; (8001658 <main+0x190>)
 80014ee:	f000 f903 	bl	80016f8 <_ZN3LED2OnEv>


	//USART
	Console.init(2) ;
 80014f2:	485a      	ldr	r0, [pc, #360]	; (800165c <main+0x194>)
 80014f4:	f04f 0102 	mov.w	r1, #2
 80014f8:	f000 f93e 	bl	8001778 <_ZN5USART4initEh>
	Console.sendString("\r\nStart!!\r\n\r\n");
 80014fc:	4857      	ldr	r0, [pc, #348]	; (800165c <main+0x194>)
 80014fe:	4958      	ldr	r1, [pc, #352]	; (8001660 <main+0x198>)
 8001500:	f000 fa24 	bl	800194c <_ZN5USART10sendStringEPKc>

	//SYSTICK
	SysTick_Config(10000000);
 8001504:	4857      	ldr	r0, [pc, #348]	; (8001664 <main+0x19c>)
 8001506:	f7ff ffb5 	bl	8001474 <SysTick_Config>

	YellowLED.Toggle();
 800150a:	4853      	ldr	r0, [pc, #332]	; (8001658 <main+0x190>)
 800150c:	f000 f914 	bl	8001738 <_ZN3LED6ToggleEv>

	I2C i2c=I2C(1);
 8001510:	f107 031c 	add.w	r3, r7, #28
 8001514:	4618      	mov	r0, r3
 8001516:	f04f 0101 	mov.w	r1, #1
 800151a:	f000 facf 	bl	8001abc <_ZN3I2CC1Eh>

	KamodRGB Rgb=KamodRGB(0,i2c);
 800151e:	f107 0310 	add.w	r3, r7, #16
 8001522:	4618      	mov	r0, r3
 8001524:	f04f 0100 	mov.w	r1, #0
 8001528:	f107 031c 	add.w	r3, r7, #28
 800152c:	cb0c      	ldmia	r3, {r2, r3}
 800152e:	f7ff fee1 	bl	80012f4 <_ZN8KamodRGBC1Eh3I2C>
	Rgb.light(KAmber,255);
 8001532:	f107 0310 	add.w	r3, r7, #16
 8001536:	4618      	mov	r0, r3
 8001538:	f04f 0102 	mov.w	r1, #2
 800153c:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8001540:	f7ff ff50 	bl	80013e4 <_ZN8KamodRGB5lightE14KamodRGBColorsh>

	Console.sendString("KAMOD MEMS 2\r\n");
 8001544:	4845      	ldr	r0, [pc, #276]	; (800165c <main+0x194>)
 8001546:	4948      	ldr	r1, [pc, #288]	; (8001668 <main+0x1a0>)
 8001548:	f000 fa00 	bl	800194c <_ZN5USART10sendStringEPKc>
	unsigned char B[2] = {LIS35_REG_CR1, LIS35_REG_CR1_XEN | LIS35_REG_CR1_YEN | LIS35_REG_CR1_ZEN | LIS35_REG_CR1_ACTIVE | LIS35_REG_CR1_FULL_SCALE};
 800154c:	4b47      	ldr	r3, [pc, #284]	; (800166c <main+0x1a4>)
 800154e:	881b      	ldrh	r3, [r3, #0]
 8001550:	81bb      	strh	r3, [r7, #12]
//
//	i2c.readBytes(58,B,2);
//	Console.sendChar(B[0]);
//	Console.sendChar(B[1]);

	Rgb.light(KRed,0);
 8001552:	f107 0310 	add.w	r3, r7, #16
 8001556:	4618      	mov	r0, r3
 8001558:	f04f 0104 	mov.w	r1, #4
 800155c:	f04f 0200 	mov.w	r2, #0
 8001560:	f7ff ff40 	bl	80013e4 <_ZN8KamodRGB5lightE14KamodRGBColorsh>
	Rgb.light(KBlue,0);
 8001564:	f107 0310 	add.w	r3, r7, #16
 8001568:	4618      	mov	r0, r3
 800156a:	f04f 0103 	mov.w	r1, #3
 800156e:	f04f 0200 	mov.w	r2, #0
 8001572:	f7ff ff37 	bl	80013e4 <_ZN8KamodRGB5lightE14KamodRGBColorsh>
	Rgb.light(KGreen,0);
 8001576:	f107 0310 	add.w	r3, r7, #16
 800157a:	4618      	mov	r0, r3
 800157c:	f04f 0105 	mov.w	r1, #5
 8001580:	f04f 0200 	mov.w	r2, #0
 8001584:	f7ff ff2e 	bl	80013e4 <_ZN8KamodRGB5lightE14KamodRGBColorsh>

  	YellowLED.Toggle();
 8001588:	4833      	ldr	r0, [pc, #204]	; (8001658 <main+0x190>)
 800158a:	f000 f8d5 	bl	8001738 <_ZN3LED6ToggleEv>

  	//main loop
  	while(1)
	{
  		for(int i=3;i<6;i++)
 800158e:	f04f 0303 	mov.w	r3, #3
 8001592:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001594:	e054      	b.n	8001640 <main+0x178>
  		{
  			for(int j=0;j<256;j++)
 8001596:	f04f 0300 	mov.w	r3, #0
 800159a:	62bb      	str	r3, [r7, #40]	; 0x28
 800159c:	e044      	b.n	8001628 <main+0x160>
  			{
  				i2c.sendBytes(LIS35_I2CADDR, B, 2);
 800159e:	f107 021c 	add.w	r2, r7, #28
 80015a2:	f107 030c 	add.w	r3, r7, #12
 80015a6:	4610      	mov	r0, r2
 80015a8:	f04f 0138 	mov.w	r1, #56	; 0x38
 80015ac:	461a      	mov	r2, r3
 80015ae:	f04f 0302 	mov.w	r3, #2
 80015b2:	f000 fb01 	bl	8001bb8 <_ZN3I2C9sendBytesEhPhh>

				B[0] = LIS35_REG_OUTX | LIS35_AUTOINC ;
 80015b6:	f04f 03a9 	mov.w	r3, #169	; 0xa9
 80015ba:	733b      	strb	r3, [r7, #12]
				i2c.sendBytes2(LIS35_I2CADDR, B, 1);
 80015bc:	f107 021c 	add.w	r2, r7, #28
 80015c0:	f107 030c 	add.w	r3, r7, #12
 80015c4:	4610      	mov	r0, r2
 80015c6:	f04f 0138 	mov.w	r1, #56	; 0x38
 80015ca:	461a      	mov	r2, r3
 80015cc:	f04f 0301 	mov.w	r3, #1
 80015d0:	f000 fb64 	bl	8001c9c <_ZN3I2C10sendBytes2EhPhh>


				i2c.readBytes(LIS35_I2CADDR, C, 5);
 80015d4:	f107 021c 	add.w	r2, r7, #28
 80015d8:	f107 0304 	add.w	r3, r7, #4
 80015dc:	4610      	mov	r0, r2
 80015de:	f04f 0138 	mov.w	r1, #56	; 0x38
 80015e2:	461a      	mov	r2, r3
 80015e4:	f04f 0305 	mov.w	r3, #5
 80015e8:	f000 fbc2 	bl	8001d70 <_ZN3I2C9readBytesEhPhh>

				//Rgb.light(KRed,C[0]);
				Rgb.light(KGreen,C[2]);
 80015ec:	79bb      	ldrb	r3, [r7, #6]
 80015ee:	f107 0210 	add.w	r2, r7, #16
 80015f2:	4610      	mov	r0, r2
 80015f4:	f04f 0105 	mov.w	r1, #5
 80015f8:	461a      	mov	r2, r3
 80015fa:	f7ff fef3 	bl	80013e4 <_ZN8KamodRGB5lightE14KamodRGBColorsh>
				//Rgb.light(KBlue,C[4]);

				for(int z=0;z<100000;z++);
 80015fe:	f04f 0300 	mov.w	r3, #0
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
 8001604:	e003      	b.n	800160e <main+0x146>
 8001606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001608:	f103 0301 	add.w	r3, r3, #1
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
 800160e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001610:	4b17      	ldr	r3, [pc, #92]	; (8001670 <main+0x1a8>)
 8001612:	429a      	cmp	r2, r3
 8001614:	bfcc      	ite	gt
 8001616:	2300      	movgt	r3, #0
 8001618:	2301      	movle	r3, #1
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2b00      	cmp	r3, #0
 800161e:	d1f2      	bne.n	8001606 <main+0x13e>
  	//main loop
  	while(1)
	{
  		for(int i=3;i<6;i++)
  		{
  			for(int j=0;j<256;j++)
 8001620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001622:	f103 0301 	add.w	r3, r3, #1
 8001626:	62bb      	str	r3, [r7, #40]	; 0x28
 8001628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800162a:	2bff      	cmp	r3, #255	; 0xff
 800162c:	bfcc      	ite	gt
 800162e:	2300      	movgt	r3, #0
 8001630:	2301      	movle	r3, #1
 8001632:	b2db      	uxtb	r3, r3
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1b2      	bne.n	800159e <main+0xd6>
  	YellowLED.Toggle();

  	//main loop
  	while(1)
	{
  		for(int i=3;i<6;i++)
 8001638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800163a:	f103 0301 	add.w	r3, r3, #1
 800163e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001642:	2b05      	cmp	r3, #5
 8001644:	bfcc      	ite	gt
 8001646:	2300      	movgt	r3, #0
 8001648:	2301      	movle	r3, #1
 800164a:	b2db      	uxtb	r3, r3
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1a2      	bne.n	8001596 <main+0xce>
	Rgb.light(KGreen,0);

  	YellowLED.Toggle();

  	//main loop
  	while(1)
 8001650:	e79d      	b.n	800158e <main+0xc6>
 8001652:	bf00      	nop
 8001654:	20000014 	.word	0x20000014
 8001658:	20000018 	.word	0x20000018
 800165c:	2000001c 	.word	0x2000001c
 8001660:	08001e7c 	.word	0x08001e7c
 8001664:	00989680 	.word	0x00989680
 8001668:	08001e8c 	.word	0x08001e8c
 800166c:	08001eb8 	.word	0x08001eb8
 8001670:	0001869f 	.word	0x0001869f

08001674 <SysTick_Handler>:
	return 0;
}

extern "C" void SysTick_Handler(void);
void SysTick_Handler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
	YellowLED.Toggle();
 8001678:	4803      	ldr	r0, [pc, #12]	; (8001688 <SysTick_Handler+0x14>)
 800167a:	f000 f85d 	bl	8001738 <_ZN3LED6ToggleEv>
	GreenLED.Toggle();
 800167e:	4803      	ldr	r0, [pc, #12]	; (800168c <SysTick_Handler+0x18>)
 8001680:	f000 f85a 	bl	8001738 <_ZN3LED6ToggleEv>
}
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000018 	.word	0x20000018
 800168c:	20000014 	.word	0x20000014

08001690 <_ZN3LED4initE5ELEDs>:
{
	init(color);
}

void LED::init(ELEDs color)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	460b      	mov	r3, r1
 800169a:	70fb      	strb	r3, [r7, #3]
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 800169c:	f04f 0010 	mov.w	r0, #16
 80016a0:	f04f 0101 	mov.w	r1, #1
 80016a4:	f7ff fba0 	bl	8000de8 <RCC_APB2PeriphClockCmd>

	switch (color)
 80016a8:	78fb      	ldrb	r3, [r7, #3]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d004      	beq.n	80016b8 <_ZN3LED4initE5ELEDs+0x28>
	{
	case green:
		GPIO_Pin = GPIO_Pin_6;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f04f 0240 	mov.w	r2, #64	; 0x40
 80016b4:	801a      	strh	r2, [r3, #0]
		break;
 80016b6:	e004      	b.n	80016c2 <_ZN3LED4initE5ELEDs+0x32>
	case yellow:
		GPIO_Pin = GPIO_Pin_7;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f04f 0280 	mov.w	r2, #128	; 0x80
 80016be:	801a      	strh	r2, [r3, #0]
		break;
 80016c0:	bf00      	nop
//	default :
//		assert();//TODO
	}

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 80016c2:	f04f 0301 	mov.w	r3, #1
 80016c6:	73bb      	strb	r3, [r7, #14]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80016c8:	f04f 0310 	mov.w	r3, #16
 80016cc:	73fb      	strb	r3, [r7, #15]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 80016ce:	f107 030c 	add.w	r3, r7, #12
 80016d2:	4808      	ldr	r0, [pc, #32]	; (80016f4 <_ZN3LED4initE5ELEDs+0x64>)
 80016d4:	4619      	mov	r1, r3
 80016d6:	f7fe ff23 	bl	8000520 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	881b      	ldrh	r3, [r3, #0]
 80016de:	81bb      	strh	r3, [r7, #12]

	GPIO_Init(GPIOC, &GPIO_InitStructure);
 80016e0:	f107 030c 	add.w	r3, r7, #12
 80016e4:	4803      	ldr	r0, [pc, #12]	; (80016f4 <_ZN3LED4initE5ELEDs+0x64>)
 80016e6:	4619      	mov	r1, r3
 80016e8:	f7fe ff1a 	bl	8000520 <GPIO_Init>

}
 80016ec:	f107 0710 	add.w	r7, r7, #16
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40011000 	.word	0x40011000

080016f8 <_ZN3LED2OnEv>:

void LED::On()
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
	GPIO_SetBits(GPIOC, GPIO_Pin);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	881b      	ldrh	r3, [r3, #0]
 8001704:	4803      	ldr	r0, [pc, #12]	; (8001714 <_ZN3LED2OnEv+0x1c>)
 8001706:	4619      	mov	r1, r3
 8001708:	f7ff f808 	bl	800071c <GPIO_SetBits>
}
 800170c:	f107 0708 	add.w	r7, r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40011000 	.word	0x40011000

08001718 <_ZN3LED3OffEv>:

void LED::Off()
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
	GPIO_ResetBits(GPIOC, GPIO_Pin);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	881b      	ldrh	r3, [r3, #0]
 8001724:	4803      	ldr	r0, [pc, #12]	; (8001734 <_ZN3LED3OffEv+0x1c>)
 8001726:	4619      	mov	r1, r3
 8001728:	f7ff f806 	bl	8000738 <GPIO_ResetBits>
}
 800172c:	f107 0708 	add.w	r7, r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40011000 	.word	0x40011000

08001738 <_ZN3LED6ToggleEv>:

void LED::Toggle()
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
	if (GPIO_ReadInputDataBit(GPIOC,GPIO_Pin) != RESET)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	881b      	ldrh	r3, [r3, #0]
 8001744:	480b      	ldr	r0, [pc, #44]	; (8001774 <_ZN3LED6ToggleEv+0x3c>)
 8001746:	4619      	mov	r1, r3
 8001748:	f7fe ffca 	bl	80006e0 <GPIO_ReadInputDataBit>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	bf0c      	ite	eq
 8001752:	2300      	moveq	r3, #0
 8001754:	2301      	movne	r3, #1
 8001756:	b2db      	uxtb	r3, r3
 8001758:	2b00      	cmp	r3, #0
 800175a:	d003      	beq.n	8001764 <_ZN3LED6ToggleEv+0x2c>
	{
		Off();
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f7ff ffdb 	bl	8001718 <_ZN3LED3OffEv>
 8001762:	e002      	b.n	800176a <_ZN3LED6ToggleEv+0x32>
	}
	else
	{
		On();
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7ff ffc7 	bl	80016f8 <_ZN3LED2OnEv>
	}
}
 800176a:	f107 0708 	add.w	r7, r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40011000 	.word	0x40011000

08001778 <_ZN5USART4initEh>:
{
	init(U);
}

void USART::init(unsigned char U)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08c      	sub	sp, #48	; 0x30
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	460b      	mov	r3, r1
 8001782:	70fb      	strb	r3, [r7, #3]
	ptr=0;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	buff[ptr]='\0';
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	18d3      	adds	r3, r2, r3
 8001798:	f04f 0200 	mov.w	r2, #0
 800179c:	725a      	strb	r2, [r3, #9]
	USART_ClockInitTypeDef USART_ClockInitStructure;
	USART_InitTypeDef USART_InitStructure;

	unsigned long RCC_APB1Periph, RCC_APB2Periph;

	switch (U)
 800179e:	78fb      	ldrb	r3, [r7, #3]
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d115      	bne.n	80017d0 <_ZN5USART4initEh+0x58>
	{
		case 2:
			USARTx      = USART2;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	4a4e      	ldr	r2, [pc, #312]	; (80018e0 <_ZN5USART4initEh+0x168>)
 80017a8:	601a      	str	r2, [r3, #0]
			GPIO_Pin_Tx = GPIO_Pin_5;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f04f 0220 	mov.w	r2, #32
 80017b0:	809a      	strh	r2, [r3, #4]
			GPIO_Pin_Rx = GPIO_Pin_6;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f04f 0240 	mov.w	r2, #64	; 0x40
 80017b8:	80da      	strh	r2, [r3, #6]
			USARTx_IRQn = USART2_IRQn;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f04f 0226 	mov.w	r2, #38	; 0x26
 80017c0:	721a      	strb	r2, [r3, #8]

			RCC_APB1Periph = RCC_APB1Periph_USART2;
 80017c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017c6:	62fb      	str	r3, [r7, #44]	; 0x2c
			RCC_APB2Periph = RCC_APB2Periph_GPIOD | RCC_APB2Periph_AFIO ;
 80017c8:	f04f 0321 	mov.w	r3, #33	; 0x21
 80017cc:	62bb      	str	r3, [r7, #40]	; 0x28

			break;
 80017ce:	bf00      	nop

//		default :
//			assert(); //TODO
	}
	RCC_APB1PeriphClockCmd(RCC_APB1Periph, ENABLE);
 80017d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80017d2:	f04f 0101 	mov.w	r1, #1
 80017d6:	f7ff fb29 	bl	8000e2c <RCC_APB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph, ENABLE);
 80017da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80017dc:	f04f 0101 	mov.w	r1, #1
 80017e0:	f7ff fb02 	bl	8000de8 <RCC_APB2PeriphClockCmd>


	//Set USART Tx as AF push-pull
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_Tx;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	889b      	ldrh	r3, [r3, #4]
 80017e8:	84bb      	strh	r3, [r7, #36]	; 0x24
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80017ea:	f04f 0318 	mov.w	r3, #24
 80017ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80017f2:	f04f 0303 	mov.w	r3, #3
 80017f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	GPIO_Init(GPIOD, &GPIO_InitStructure);
 80017fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017fe:	4839      	ldr	r0, [pc, #228]	; (80018e4 <_ZN5USART4initEh+0x16c>)
 8001800:	4619      	mov	r1, r3
 8001802:	f7fe fe8d 	bl	8000520 <GPIO_Init>

	//Set USART Rx as input floating
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_Rx;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	88db      	ldrh	r3, [r3, #6]
 800180a:	84bb      	strh	r3, [r7, #36]	; 0x24
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 800180c:	f04f 0304 	mov.w	r3, #4
 8001810:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001814:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001818:	4832      	ldr	r0, [pc, #200]	; (80018e4 <_ZN5USART4initEh+0x16c>)
 800181a:	4619      	mov	r1, r3
 800181c:	f7fe fe80 	bl	8000520 <GPIO_Init>


	USART_ClockStructInit(&USART_ClockInitStructure);
 8001820:	f107 031c 	add.w	r3, r7, #28
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff fc2b 	bl	8001080 <USART_ClockStructInit>
	USART_ClockInit(USARTx, &USART_ClockInitStructure);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	f107 031c 	add.w	r3, r7, #28
 8001832:	4610      	mov	r0, r2
 8001834:	4619      	mov	r1, r3
 8001836:	f7ff fbf3 	bl	8001020 <USART_ClockInit>


	USART_InitStructure.USART_BaudRate = 115200;
 800183a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800183e:	60fb      	str	r3, [r7, #12]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8001840:	f04f 0300 	mov.w	r3, #0
 8001844:	823b      	strh	r3, [r7, #16]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8001846:	f04f 0300 	mov.w	r3, #0
 800184a:	827b      	strh	r3, [r7, #18]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 800184c:	f04f 0300 	mov.w	r3, #0
 8001850:	82bb      	strh	r3, [r7, #20]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8001852:	f04f 0300 	mov.w	r3, #0
 8001856:	833b      	strh	r3, [r7, #24]
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8001858:	f04f 030c 	mov.w	r3, #12
 800185c:	82fb      	strh	r3, [r7, #22]

	GPIO_PinRemapConfig(GPIO_Remap_USART2  ,ENABLE);
 800185e:	f04f 0008 	mov.w	r0, #8
 8001862:	f04f 0101 	mov.w	r1, #1
 8001866:	f7fe ff75 	bl	8000754 <GPIO_PinRemapConfig>

	//Write USART parameters
	USART_Init(USARTx, &USART_InitStructure);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	f107 030c 	add.w	r3, r7, #12
 8001872:	4610      	mov	r0, r2
 8001874:	4619      	mov	r1, r3
 8001876:	f7ff fafb 	bl	8000e70 <USART_Init>

	//Enable USART
	USART_Cmd(USARTx, ENABLE);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f04f 0101 	mov.w	r1, #1
 8001884:	f7ff fc16 	bl	80010b4 <USART_Cmd>
	//hmmm
	while( USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET);
 8001888:	bf00      	nop
 800188a:	4815      	ldr	r0, [pc, #84]	; (80018e0 <_ZN5USART4initEh+0x168>)
 800188c:	f04f 0140 	mov.w	r1, #64	; 0x40
 8001890:	f7ff fcaa 	bl	80011e8 <USART_GetFlagStatus>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	bf14      	ite	ne
 800189a:	2300      	movne	r3, #0
 800189c:	2301      	moveq	r3, #1
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d1f2      	bne.n	800188a <_ZN5USART4initEh+0x112>

	USART_ITConfig(USARTx, USART_IT_RXNE, ENABLE);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f240 5125 	movw	r1, #1317	; 0x525
 80018ae:	f04f 0201 	mov.w	r2, #1
 80018b2:	f7ff fc1f 	bl	80010f4 <USART_ITConfig>
	//USART_ITConfig(USART1, USART_IT_TXE, ENABLE);

	//USART_Cmd(USART1, ENABLE);

	NVIC_InitTypeDef NVIC_InitStructure;
	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 80018b6:	f04f 0326 	mov.w	r3, #38	; 0x26
 80018ba:	723b      	strb	r3, [r7, #8]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
 80018bc:	f04f 0302 	mov.w	r3, #2
 80018c0:	727b      	strb	r3, [r7, #9]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;
 80018c2:	f04f 0303 	mov.w	r3, #3
 80018c6:	72bb      	strb	r3, [r7, #10]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80018c8:	f04f 0301 	mov.w	r3, #1
 80018cc:	72fb      	strb	r3, [r7, #11]
	NVIC_Init(&NVIC_InitStructure);
 80018ce:	f107 0308 	add.w	r3, r7, #8
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fdb8 	bl	8000448 <NVIC_Init>

}
 80018d8:	f107 0730 	add.w	r7, r7, #48	; 0x30
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40004400 	.word	0x40004400
 80018e4:	40011400 	.word	0x40011400

080018e8 <_ZN5USART8sendCharEc>:

void USART::sendChar(char c)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	460b      	mov	r3, r1
 80018f2:	70fb      	strb	r3, [r7, #3]
	while( USART_GetFlagStatus(USARTx, USART_FLAG_TC) == RESET);
 80018f4:	bf00      	nop
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f04f 0140 	mov.w	r1, #64	; 0x40
 8001900:	f7ff fc72 	bl	80011e8 <USART_GetFlagStatus>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	bf14      	ite	ne
 800190a:	2300      	movne	r3, #0
 800190c:	2301      	moveq	r3, #1
 800190e:	b2db      	uxtb	r3, r3
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1f0      	bne.n	80018f6 <_ZN5USART8sendCharEc+0xe>
	USART_SendData(USARTx, (uint8_t) c);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	78fb      	ldrb	r3, [r7, #3]
 800191a:	b29b      	uxth	r3, r3
 800191c:	4610      	mov	r0, r2
 800191e:	4619      	mov	r1, r3
 8001920:	f7ff fc3c 	bl	800119c <USART_SendData>
}
 8001924:	f107 0708 	add.w	r7, r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <_ZN5USART8readCharEv>:
char USART::readChar()
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
	return (char) USART_ReceiveData(USARTx);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff fc43 	bl	80011c4 <USART_ReceiveData>
 800193e:	4603      	mov	r3, r0
 8001940:	b2db      	uxtb	r3, r3
}
 8001942:	4618      	mov	r0, r3
 8001944:	f107 0708 	add.w	r7, r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <_ZN5USART10sendStringEPKc>:

void USART::sendString(const char * c)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
	int i=0;
 8001956:	f04f 0300 	mov.w	r3, #0
 800195a:	60fb      	str	r3, [r7, #12]
	while(c[i]!='\0')
 800195c:	e00b      	b.n	8001976 <_ZN5USART10sendStringEPKc+0x2a>
	{
		sendChar(c[i++]);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	18d3      	adds	r3, r2, r3
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	f102 0201 	add.w	r2, r2, #1
 800196c:	60fa      	str	r2, [r7, #12]
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	4619      	mov	r1, r3
 8001972:	f7ff ffb9 	bl	80018e8 <_ZN5USART8sendCharEc>
}

void USART::sendString(const char * c)
{
	int i=0;
	while(c[i]!='\0')
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	18d3      	adds	r3, r2, r3
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	bf0c      	ite	eq
 8001982:	2300      	moveq	r3, #0
 8001984:	2301      	movne	r3, #1
 8001986:	b2db      	uxtb	r3, r3
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1e8      	bne.n	800195e <_ZN5USART10sendStringEPKc+0x12>
	{
		sendChar(c[i++]);
	}
}
 800198c:	f107 0710 	add.w	r7, r7, #16
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <_ZN5USART14recCharHandlerEc>:
void USART::recCharHandler(char c)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	460b      	mov	r3, r1
 800199e:	70fb      	strb	r3, [r7, #3]
	if (c=='\r')
 80019a0:	78fb      	ldrb	r3, [r7, #3]
 80019a2:	2b0d      	cmp	r3, #13
 80019a4:	d12d      	bne.n	8001a02 <_ZN5USART14recCharHandlerEc+0x6e>
	{
		sendChar((uint8_t)'\r');
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f04f 010d 	mov.w	r1, #13
 80019ac:	f7ff ff9c 	bl	80018e8 <_ZN5USART8sendCharEc>
		sendChar((uint8_t)'\n');
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f04f 010a 	mov.w	r1, #10
 80019b6:	f7ff ff97 	bl	80018e8 <_ZN5USART8sendCharEc>
		sendString("Otrzymano komende: ");
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	4924      	ldr	r1, [pc, #144]	; (8001a50 <_ZN5USART14recCharHandlerEc+0xbc>)
 80019be:	f7ff ffc5 	bl	800194c <_ZN5USART10sendStringEPKc>
		sendString(buff);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f103 0309 	add.w	r3, r3, #9
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	4619      	mov	r1, r3
 80019cc:	f7ff ffbe 	bl	800194c <_ZN5USART10sendStringEPKc>
		sendChar((uint8_t)'\r');
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f04f 010d 	mov.w	r1, #13
 80019d6:	f7ff ff87 	bl	80018e8 <_ZN5USART8sendCharEc>
		sendChar((uint8_t)'\n');
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f04f 010a 	mov.w	r1, #10
 80019e0:	f7ff ff82 	bl	80018e8 <_ZN5USART8sendCharEc>
		sendChar((uint8_t)'>');
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f04f 013e 	mov.w	r1, #62	; 0x3e
 80019ea:	f7ff ff7d 	bl	80018e8 <_ZN5USART8sendCharEc>
		ptr=0;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f04f 0200 	mov.w	r2, #0
 80019f4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
		buff[0]='\0';
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f04f 0200 	mov.w	r2, #0
 80019fe:	725a      	strb	r2, [r3, #9]
		return;
 8001a00:	e021      	b.n	8001a46 <_ZN5USART14recCharHandlerEc+0xb2>
	}
	if (ptr<64)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8001a08:	2b3f      	cmp	r3, #63	; 0x3f
 8001a0a:	d81c      	bhi.n	8001a46 <_ZN5USART14recCharHandlerEc+0xb2>
	{
		sendChar(c);
 8001a0c:	78fb      	ldrb	r3, [r7, #3]
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	4619      	mov	r1, r3
 8001a12:	f7ff ff69 	bl	80018e8 <_ZN5USART8sendCharEc>
		buff[ptr]=c;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	18d3      	adds	r3, r2, r3
 8001a20:	78fa      	ldrb	r2, [r7, #3]
 8001a22:	725a      	strb	r2, [r3, #9]
		buff[++ptr]='\0';
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8001a2a:	f103 0301 	add.w	r3, r3, #1
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	18d3      	adds	r3, r2, r3
 8001a40:	f04f 0200 	mov.w	r2, #0
 8001a44:	725a      	strb	r2, [r3, #9]
	}
}
 8001a46:	f107 0708 	add.w	r7, r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	08001e9c 	.word	0x08001e9c

08001a54 <USART2_IRQHandler>:

extern "C" void USART2_IRQHandler(void);
void USART2_IRQHandler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
	extern LED YellowLED ;
	extern USART Console ;
	char b;
	if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 8001a5a:	480f      	ldr	r0, [pc, #60]	; (8001a98 <USART2_IRQHandler+0x44>)
 8001a5c:	f240 5125 	movw	r1, #1317	; 0x525
 8001a60:	f7ff fbe2 	bl	8001228 <USART_GetITStatus>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	bf0c      	ite	eq
 8001a6a:	2300      	moveq	r3, #0
 8001a6c:	2301      	movne	r3, #1
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d00c      	beq.n	8001a8e <USART2_IRQHandler+0x3a>
	{
		YellowLED.Toggle();
 8001a74:	4809      	ldr	r0, [pc, #36]	; (8001a9c <USART2_IRQHandler+0x48>)
 8001a76:	f7ff fe5f 	bl	8001738 <_ZN3LED6ToggleEv>

		b=Console.readChar();
 8001a7a:	4809      	ldr	r0, [pc, #36]	; (8001aa0 <USART2_IRQHandler+0x4c>)
 8001a7c:	f7ff ff56 	bl	800192c <_ZN5USART8readCharEv>
 8001a80:	4603      	mov	r3, r0
 8001a82:	71fb      	strb	r3, [r7, #7]
		Console.recCharHandler(b);
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	4806      	ldr	r0, [pc, #24]	; (8001aa0 <USART2_IRQHandler+0x4c>)
 8001a88:	4619      	mov	r1, r3
 8001a8a:	f7ff ff83 	bl	8001994 <_ZN5USART14recCharHandlerEc>
	}
}
 8001a8e:	f107 0708 	add.w	r7, r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40004400 	.word	0x40004400
 8001a9c:	20000018 	.word	0x20000018
 8001aa0:	2000001c 	.word	0x2000001c

08001aa4 <_ZN3I2CC1Ev>:

I2C::I2C()
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
{

}
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f107 070c 	add.w	r7, r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bc80      	pop	{r7}
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop

08001abc <_ZN3I2CC1Eh>:

I2C::I2C(unsigned char I)
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	70fb      	strb	r3, [r7, #3]
{
	init(I);
 8001ac8:	78fb      	ldrb	r3, [r7, #3]
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	4619      	mov	r1, r3
 8001ace:	f000 f807 	bl	8001ae0 <_ZN3I2C4initEh>
}
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f107 0708 	add.w	r7, r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop

08001ae0 <_ZN3I2C4initEh>:
void I2C::init(unsigned char I)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08a      	sub	sp, #40	; 0x28
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	460b      	mov	r3, r1
 8001aea:	70fb      	strb	r3, [r7, #3]
	I2C_InitTypeDef I2C_InitStructure;


	unsigned long RCC_APB1Periph, RCC_APB2Periph;

	switch (I)
 8001aec:	78fb      	ldrb	r3, [r7, #3]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d111      	bne.n	8001b16 <_ZN3I2C4initEh+0x36>
	{
		case 1:
			I2Cx      = I2C1;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a2d      	ldr	r2, [pc, #180]	; (8001bac <_ZN3I2C4initEh+0xcc>)
 8001af6:	601a      	str	r2, [r3, #0]
			GPIO_Pin_SCL = GPIO_Pin_8;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001afe:	809a      	strh	r2, [r3, #4]
			GPIO_Pin_SDA = GPIO_Pin_9;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b06:	80da      	strh	r2, [r3, #6]

			RCC_APB1Periph = RCC_APB1Periph_I2C1;
 8001b08:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
			RCC_APB2Periph = RCC_APB2Periph_GPIOB | RCC_APB2Periph_AFIO ;
 8001b0e:	f04f 0309 	mov.w	r3, #9
 8001b12:	623b      	str	r3, [r7, #32]

			break;
 8001b14:	bf00      	nop

	//		default :
	//			assert(); //TODO
	}

	RCC_APB1PeriphClockCmd(RCC_APB1Periph, ENABLE);
 8001b16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b18:	f04f 0101 	mov.w	r1, #1
 8001b1c:	f7ff f986 	bl	8000e2c <RCC_APB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph, ENABLE);
 8001b20:	6a38      	ldr	r0, [r7, #32]
 8001b22:	f04f 0101 	mov.w	r1, #1
 8001b26:	f7ff f95f 	bl	8000de8 <RCC_APB2PeriphClockCmd>

	// Configure I2C1 SCL pin
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_SCL;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	889b      	ldrh	r3, [r3, #4]
 8001b2e:	83bb      	strh	r3, [r7, #28]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD;
 8001b30:	f04f 031c 	mov.w	r3, #28
 8001b34:	77fb      	strb	r3, [r7, #31]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001b36:	f04f 0303 	mov.w	r3, #3
 8001b3a:	77bb      	strb	r3, [r7, #30]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001b3c:	f107 031c 	add.w	r3, r7, #28
 8001b40:	481b      	ldr	r0, [pc, #108]	; (8001bb0 <_ZN3I2C4initEh+0xd0>)
 8001b42:	4619      	mov	r1, r3
 8001b44:	f7fe fcec 	bl	8000520 <GPIO_Init>

	// Configure I2C1 SDA pin
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_SDA;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	88db      	ldrh	r3, [r3, #6]
 8001b4c:	83bb      	strh	r3, [r7, #28]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001b4e:	f107 031c 	add.w	r3, r7, #28
 8001b52:	4817      	ldr	r0, [pc, #92]	; (8001bb0 <_ZN3I2C4initEh+0xd0>)
 8001b54:	4619      	mov	r1, r3
 8001b56:	f7fe fce3 	bl	8000520 <GPIO_Init>


	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 8001b5a:	f04f 0300 	mov.w	r3, #0
 8001b5e:	823b      	strh	r3, [r7, #16]
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 8001b60:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8001b64:	827b      	strh	r3, [r7, #18]
	I2C_InitStructure.I2C_OwnAddress1 = 0x03;
 8001b66:	f04f 0303 	mov.w	r3, #3
 8001b6a:	82bb      	strh	r3, [r7, #20]
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 8001b6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b70:	82fb      	strh	r3, [r7, #22]
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8001b72:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b76:	833b      	strh	r3, [r7, #24]
	I2C_InitStructure.I2C_ClockSpeed = 200000;
 8001b78:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <_ZN3I2C4initEh+0xd4>)
 8001b7a:	60fb      	str	r3, [r7, #12]
	I2C_Init(I2C1, &I2C_InitStructure);
 8001b7c:	f107 030c 	add.w	r3, r7, #12
 8001b80:	480a      	ldr	r0, [pc, #40]	; (8001bac <_ZN3I2C4initEh+0xcc>)
 8001b82:	4619      	mov	r1, r3
 8001b84:	f7fe fe68 	bl	8000858 <I2C_Init>

	GPIO_PinRemapConfig(GPIO_Remap_I2C1  ,ENABLE);
 8001b88:	f04f 0002 	mov.w	r0, #2
 8001b8c:	f04f 0101 	mov.w	r1, #1
 8001b90:	f7fe fde0 	bl	8000754 <GPIO_PinRemapConfig>

	I2C_Cmd(I2Cx, ENABLE);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f04f 0101 	mov.w	r1, #1
 8001b9e:	f7fe ff33 	bl	8000a08 <I2C_Cmd>

}
 8001ba2:	f107 0728 	add.w	r7, r7, #40	; 0x28
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40005400 	.word	0x40005400
 8001bb0:	40010c00 	.word	0x40010c00
 8001bb4:	00030d40 	.word	0x00030d40

08001bb8 <_ZN3I2C9sendBytesEhPhh>:

void I2C::sendBytes(unsigned char addr, unsigned char * b, unsigned char len)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	607a      	str	r2, [r7, #4]
 8001bc2:	460a      	mov	r2, r1
 8001bc4:	72fa      	strb	r2, [r7, #11]
 8001bc6:	70fb      	strb	r3, [r7, #3]
	I2C_GenerateSTART(I2Cx, ENABLE);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f04f 0101 	mov.w	r1, #1
 8001bd2:	f7fe ff39 	bl	8000a48 <I2C_GenerateSTART>
	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_MODE_SELECT));
 8001bd6:	bf00      	nop
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	492c      	ldr	r1, [pc, #176]	; (8001c90 <_ZN3I2C9sendBytesEhPhh+0xd8>)
 8001be0:	f7fe ffce 	bl	8000b80 <I2C_CheckEvent>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	bf14      	ite	ne
 8001bea:	2300      	movne	r3, #0
 8001bec:	2301      	moveq	r3, #1
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d1f1      	bne.n	8001bd8 <_ZN3I2C9sendBytesEhPhh+0x20>
	I2C_Send7bitAddress(I2Cx, addr, I2C_Direction_Transmitter);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	7afb      	ldrb	r3, [r7, #11]
 8001bfa:	4610      	mov	r0, r2
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	f04f 0200 	mov.w	r2, #0
 8001c02:	f7fe ff9f 	bl	8000b44 <I2C_Send7bitAddress>
	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
 8001c06:	bf00      	nop
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	4921      	ldr	r1, [pc, #132]	; (8001c94 <_ZN3I2C9sendBytesEhPhh+0xdc>)
 8001c10:	f7fe ffb6 	bl	8000b80 <I2C_CheckEvent>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	bf14      	ite	ne
 8001c1a:	2300      	movne	r3, #0
 8001c1c:	2301      	moveq	r3, #1
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1f1      	bne.n	8001c08 <_ZN3I2C9sendBytesEhPhh+0x50>
	for(unsigned char i=0 ; i<len ; i++)
 8001c24:	f04f 0300 	mov.w	r3, #0
 8001c28:	75fb      	strb	r3, [r7, #23]
 8001c2a:	e01c      	b.n	8001c66 <_ZN3I2C9sendBytesEhPhh+0xae>
	{
		I2C_SendData(I2Cx,b[i]);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	7dfb      	ldrb	r3, [r7, #23]
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	18cb      	adds	r3, r1, r3
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	4610      	mov	r0, r2
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	f7fe ff64 	bl	8000b08 <I2C_SendData>
		while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 8001c40:	bf00      	nop
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	4913      	ldr	r1, [pc, #76]	; (8001c98 <_ZN3I2C9sendBytesEhPhh+0xe0>)
 8001c4a:	f7fe ff99 	bl	8000b80 <I2C_CheckEvent>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	bf14      	ite	ne
 8001c54:	2300      	movne	r3, #0
 8001c56:	2301      	moveq	r3, #1
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1f1      	bne.n	8001c42 <_ZN3I2C9sendBytesEhPhh+0x8a>
{
	I2C_GenerateSTART(I2Cx, ENABLE);
	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_MODE_SELECT));
	I2C_Send7bitAddress(I2Cx, addr, I2C_Direction_Transmitter);
	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
	for(unsigned char i=0 ; i<len ; i++)
 8001c5e:	7dfb      	ldrb	r3, [r7, #23]
 8001c60:	f103 0301 	add.w	r3, r3, #1
 8001c64:	75fb      	strb	r3, [r7, #23]
 8001c66:	7dfa      	ldrb	r2, [r7, #23]
 8001c68:	78fb      	ldrb	r3, [r7, #3]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	bf2c      	ite	cs
 8001c6e:	2300      	movcs	r3, #0
 8001c70:	2301      	movcc	r3, #1
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1d9      	bne.n	8001c2c <_ZN3I2C9sendBytesEhPhh+0x74>
	{
		I2C_SendData(I2Cx,b[i]);
		while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
	}
	I2C_GenerateSTOP(I2Cx, ENABLE);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f04f 0101 	mov.w	r1, #1
 8001c82:	f7fe ff01 	bl	8000a88 <I2C_GenerateSTOP>

}
 8001c86:	f107 0718 	add.w	r7, r7, #24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	00030001 	.word	0x00030001
 8001c94:	00070082 	.word	0x00070082
 8001c98:	00070084 	.word	0x00070084

08001c9c <_ZN3I2C10sendBytes2EhPhh>:
void I2C::sendBytes2(unsigned char addr, unsigned char * b, unsigned char len)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	607a      	str	r2, [r7, #4]
 8001ca6:	460a      	mov	r2, r1
 8001ca8:	72fa      	strb	r2, [r7, #11]
 8001caa:	70fb      	strb	r3, [r7, #3]
	I2C_GenerateSTART(I2Cx, ENABLE);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f04f 0101 	mov.w	r1, #1
 8001cb6:	f7fe fec7 	bl	8000a48 <I2C_GenerateSTART>
	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_MODE_SELECT));
 8001cba:	bf00      	nop
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	4928      	ldr	r1, [pc, #160]	; (8001d64 <_ZN3I2C10sendBytes2EhPhh+0xc8>)
 8001cc4:	f7fe ff5c 	bl	8000b80 <I2C_CheckEvent>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	bf14      	ite	ne
 8001cce:	2300      	movne	r3, #0
 8001cd0:	2301      	moveq	r3, #1
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1f1      	bne.n	8001cbc <_ZN3I2C10sendBytes2EhPhh+0x20>
	I2C_Send7bitAddress(I2Cx, addr, I2C_Direction_Transmitter);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	7afb      	ldrb	r3, [r7, #11]
 8001cde:	4610      	mov	r0, r2
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	f04f 0200 	mov.w	r2, #0
 8001ce6:	f7fe ff2d 	bl	8000b44 <I2C_Send7bitAddress>
	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
 8001cea:	bf00      	nop
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	491d      	ldr	r1, [pc, #116]	; (8001d68 <_ZN3I2C10sendBytes2EhPhh+0xcc>)
 8001cf4:	f7fe ff44 	bl	8000b80 <I2C_CheckEvent>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	bf14      	ite	ne
 8001cfe:	2300      	movne	r3, #0
 8001d00:	2301      	moveq	r3, #1
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1f1      	bne.n	8001cec <_ZN3I2C10sendBytes2EhPhh+0x50>
	for(unsigned char i=0 ; i<len ; i++)
 8001d08:	f04f 0300 	mov.w	r3, #0
 8001d0c:	75fb      	strb	r3, [r7, #23]
 8001d0e:	e01c      	b.n	8001d4a <_ZN3I2C10sendBytes2EhPhh+0xae>
	{
		I2C_SendData(I2Cx,b[i]);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	7dfb      	ldrb	r3, [r7, #23]
 8001d16:	6879      	ldr	r1, [r7, #4]
 8001d18:	18cb      	adds	r3, r1, r3
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	4610      	mov	r0, r2
 8001d1e:	4619      	mov	r1, r3
 8001d20:	f7fe fef2 	bl	8000b08 <I2C_SendData>
		while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 8001d24:	bf00      	nop
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	490f      	ldr	r1, [pc, #60]	; (8001d6c <_ZN3I2C10sendBytes2EhPhh+0xd0>)
 8001d2e:	f7fe ff27 	bl	8000b80 <I2C_CheckEvent>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	bf14      	ite	ne
 8001d38:	2300      	movne	r3, #0
 8001d3a:	2301      	moveq	r3, #1
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1f1      	bne.n	8001d26 <_ZN3I2C10sendBytes2EhPhh+0x8a>
{
	I2C_GenerateSTART(I2Cx, ENABLE);
	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_MODE_SELECT));
	I2C_Send7bitAddress(I2Cx, addr, I2C_Direction_Transmitter);
	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
	for(unsigned char i=0 ; i<len ; i++)
 8001d42:	7dfb      	ldrb	r3, [r7, #23]
 8001d44:	f103 0301 	add.w	r3, r3, #1
 8001d48:	75fb      	strb	r3, [r7, #23]
 8001d4a:	7dfa      	ldrb	r2, [r7, #23]
 8001d4c:	78fb      	ldrb	r3, [r7, #3]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	bf2c      	ite	cs
 8001d52:	2300      	movcs	r3, #0
 8001d54:	2301      	movcc	r3, #1
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1d9      	bne.n	8001d10 <_ZN3I2C10sendBytes2EhPhh+0x74>
	{
		I2C_SendData(I2Cx,b[i]);
		while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
	}

}
 8001d5c:	f107 0718 	add.w	r7, r7, #24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	00030001 	.word	0x00030001
 8001d68:	00070082 	.word	0x00070082
 8001d6c:	00070084 	.word	0x00070084

08001d70 <_ZN3I2C9readBytesEhPhh>:

void I2C::readBytes(unsigned char addr, unsigned char * b, unsigned char len)
{
 8001d70:	b590      	push	{r4, r7, lr}
 8001d72:	b087      	sub	sp, #28
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	607a      	str	r2, [r7, #4]
 8001d7a:	460a      	mov	r2, r1
 8001d7c:	72fa      	strb	r2, [r7, #11]
 8001d7e:	70fb      	strb	r3, [r7, #3]
	I2C_AcknowledgeConfig(I2Cx,ENABLE);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f04f 0101 	mov.w	r1, #1
 8001d8a:	f7fe fe9d 	bl	8000ac8 <I2C_AcknowledgeConfig>

	I2C_GenerateSTART(I2Cx, ENABLE);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f04f 0101 	mov.w	r1, #1
 8001d98:	f7fe fe56 	bl	8000a48 <I2C_GenerateSTART>
	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_MODE_SELECT));
 8001d9c:	bf00      	nop
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	4932      	ldr	r1, [pc, #200]	; (8001e70 <_ZN3I2C9readBytesEhPhh+0x100>)
 8001da6:	f7fe feeb 	bl	8000b80 <I2C_CheckEvent>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	bf14      	ite	ne
 8001db0:	2300      	movne	r3, #0
 8001db2:	2301      	moveq	r3, #1
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1f1      	bne.n	8001d9e <_ZN3I2C9readBytesEhPhh+0x2e>

	I2C_Send7bitAddress(I2Cx, addr, I2C_Direction_Receiver);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	7afb      	ldrb	r3, [r7, #11]
 8001dc0:	4610      	mov	r0, r2
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	f04f 0201 	mov.w	r2, #1
 8001dc8:	f7fe febc 	bl	8000b44 <I2C_Send7bitAddress>
	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));
 8001dcc:	bf00      	nop
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	4927      	ldr	r1, [pc, #156]	; (8001e74 <_ZN3I2C9readBytesEhPhh+0x104>)
 8001dd6:	f7fe fed3 	bl	8000b80 <I2C_CheckEvent>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	bf14      	ite	ne
 8001de0:	2300      	movne	r3, #0
 8001de2:	2301      	moveq	r3, #1
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1f1      	bne.n	8001dce <_ZN3I2C9readBytesEhPhh+0x5e>

	for(int i=0 ; i<len ; i++)
 8001dea:	f04f 0300 	mov.w	r3, #0
 8001dee:	617b      	str	r3, [r7, #20]
 8001df0:	e02a      	b.n	8001e48 <_ZN3I2C9readBytesEhPhh+0xd8>
	{
		if(i==len-1)
 8001df2:	78fb      	ldrb	r3, [r7, #3]
 8001df4:	f103 32ff 	add.w	r2, r3, #4294967295
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d107      	bne.n	8001e0e <_ZN3I2C9readBytesEhPhh+0x9e>
		{
			 I2C_AcknowledgeConfig(I2Cx,DISABLE);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f04f 0100 	mov.w	r1, #0
 8001e08:	f7fe fe5e 	bl	8000ac8 <I2C_AcknowledgeConfig>
		}
		while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED));
 8001e0c:	e000      	b.n	8001e10 <_ZN3I2C9readBytesEhPhh+0xa0>
 8001e0e:	bf00      	nop
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4618      	mov	r0, r3
 8001e16:	4918      	ldr	r1, [pc, #96]	; (8001e78 <_ZN3I2C9readBytesEhPhh+0x108>)
 8001e18:	f7fe feb2 	bl	8000b80 <I2C_CheckEvent>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	bf14      	ite	ne
 8001e22:	2300      	movne	r3, #0
 8001e24:	2301      	moveq	r3, #1
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1f1      	bne.n	8001e10 <_ZN3I2C9readBytesEhPhh+0xa0>
		b[i]=I2C_ReceiveData(I2Cx);
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	18d4      	adds	r4, r2, r3
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7fe fe76 	bl	8000b28 <I2C_ReceiveData>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	7023      	strb	r3, [r4, #0]
	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_MODE_SELECT));

	I2C_Send7bitAddress(I2Cx, addr, I2C_Direction_Receiver);
	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));

	for(int i=0 ; i<len ; i++)
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	f103 0301 	add.w	r3, r3, #1
 8001e46:	617b      	str	r3, [r7, #20]
 8001e48:	78fa      	ldrb	r2, [r7, #3]
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	bfd4      	ite	le
 8001e50:	2300      	movle	r3, #0
 8001e52:	2301      	movgt	r3, #1
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1cb      	bne.n	8001df2 <_ZN3I2C9readBytesEhPhh+0x82>
			 I2C_AcknowledgeConfig(I2Cx,DISABLE);
		}
		while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED));
		b[i]=I2C_ReceiveData(I2Cx);
	}
	I2C_GenerateSTOP(I2Cx, ENABLE);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f04f 0101 	mov.w	r1, #1
 8001e64:	f7fe fe10 	bl	8000a88 <I2C_GenerateSTOP>

}
 8001e68:	f107 071c 	add.w	r7, r7, #28
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd90      	pop	{r4, r7, pc}
 8001e70:	00030001 	.word	0x00030001
 8001e74:	00030002 	.word	0x00030002
 8001e78:	00030040 	.word	0x00030040
 8001e7c:	74530a0d 	.word	0x74530a0d
 8001e80:	21747261 	.word	0x21747261
 8001e84:	0d0a0d21 	.word	0x0d0a0d21
 8001e88:	0000000a 	.word	0x0000000a
 8001e8c:	4f4d414b 	.word	0x4f4d414b
 8001e90:	454d2044 	.word	0x454d2044
 8001e94:	3220534d 	.word	0x3220534d
 8001e98:	00000a0d 	.word	0x00000a0d
 8001e9c:	7a72744f 	.word	0x7a72744f
 8001ea0:	6e616d79 	.word	0x6e616d79
 8001ea4:	6f6b206f 	.word	0x6f6b206f
 8001ea8:	646e656d 	.word	0x646e656d
 8001eac:	00203a65 	.word	0x00203a65

08001eb0 <_ZZN8KamodRGB4initEh3I2CE3C.0>:
 8001eb0:	00010000 0000ff08                       ........

08001eb8 <_ZZ4mainE3C.0>:
 8001eb8:	00006720                                 g..
